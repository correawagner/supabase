const fs = require('fs')
const util = require('util')
var icons = require('./icons.json') //with path

let iconList = {}
let importList = []

//
// create icon .tsx files
//

Object.values(icons).map((icon) => {
  iconList[`Icon${icon.name}`] = `src/components/Icon/icons/Icon${icon.name}/index.tsx`
  importList.push(`export * as Icon${icon.name} from './Icon${icon.name}'`)

  var dir = `src/components/Icon/icons/Icon${icon.name}`

  fs.mkdir(dir, { recursive: true }, (err) => {
    if (err) throw err
  })

  fs.writeFile(
    `${dir}/index.tsx`,
    `export { default as Icon${icon.name} } from './Icon${icon.name}'`,
    function (err) {
      if (err) return console.log(err)
    }
  )

  fs.writeFile(
    `${dir}/Icon${icon.name}.tsx`,
    ` // DO NOT EDIT
      // this file is generated by /internals/populate-icons script

      import Icon, { IconProps } from '../../Icon'

      function Icon${icon.name}(props: IconProps) {
        return <Icon type="${icon.name}" {...props} />
      }

      export default Icon${icon.name}
    `
      .split('\n')
      .map((line, index) => (index === 6 ? `  ${line.trim()}` : line.trim()))
      .join('\n'),
    function (err) {
      if (err) return console.log(err)
      // console.log(`${icon.name} > ${icon.path}`)
    }
  )
})

//
// create export file for icons
//

fs.writeFile(
  `src/components/Icon/icons/index.tsx`,
  `// export icons
${importList
  .map((icon) => {
    return `${icon}\n`
  })
  .join('')}`,
  function (err) {
    if (err) return console.log(err)
    // console.log(`wrote file for rollup`)
  }
)

//
// create input destinations for rollup
//

fs.writeFile(`internals/icons.js`, `export default ${util.inspect(iconList)}`, function (err) {
  if (err) return console.log(err)
  // console.log(`wrote file for rollup`)
})

//
// create array export file containing icon names
//

fs.writeFile(
  `src/components/Icon/IconNames.ts`,
  ` export default [
      ${Object.keys(iconList)
        .map((icon) => `'${icon.slice(4)}'`)
        .join(',\n')},
    ] as const
  `
    .split('\n')
    .map((line) => (line.trim().startsWith("'") ? `  ${line.trim()}` : line.trim()))
    .join('\n'),
  function (err) {
    if (err) return console.log(err)
    // console.log(`wrote file for rollup`)
  }
)
