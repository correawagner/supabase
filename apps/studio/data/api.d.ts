/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/platform/notifications': {
    /** Get notifications */
    get: operations['NotificationsController_getNotificationsV2']
    /** Delete notifications */
    delete: operations['NotificationsController_deleteNotifications']
    /** Update notifications */
    patch: operations['NotificationsController_updateNotificationsV2']
  }
  '/platform/reset-password': {
    /** Reset password for email */
    post: operations['ResetPasswordController_resetPassword']
  }
  '/platform/feedback/send': {
    /** Send feedback */
    post: operations['SendFeedbackController_sendFeedback']
  }
  '/platform/feedback/downgrade': {
    /** Send exit survey to HubSpot */
    post: operations['SendExitSurveyController_sendExitSurvey']
  }
  '/platform/signup': {
    /** Sign up with email and password */
    post: operations['SignUpController_signUp']
  }
  '/platform/status': {
    /** Get infrastructure status */
    get: operations['StatusController_getStatus']
  }
  '/platform/projects-resource-warnings': {
    /**
     * Gets resource warnings for all projects accessible by the user
     * @description Only returns the minimal project info
     */
    get: operations['ProjectsResourceWarningsController_getProjectsResourceWarnings']
  }
  '/platform/tos/fly': {
    /** Redirects to Fly sso flow */
    get: operations['TermsOfServiceController_flyTosAccepted']
  }
  '/platform/auth/{ref}/config': {
    /** Gets GoTrue config */
    get: operations['GoTrueConfigController_getGoTrueConfig']
    /** Updates GoTrue config */
    patch: operations['GoTrueConfigController_updateGoTrueConfig']
  }
  '/platform/auth/{ref}/invite': {
    /** Sends an invite to the given email */
    post: operations['InviteController_sendInvite']
  }
  '/platform/auth/{ref}/magiclink': {
    /** Sends a magic link to the given email */
    post: operations['MagicLinkController_sendMagicLink']
  }
  '/platform/auth/{ref}/otp': {
    /** Sends an OTP to the given phone number */
    post: operations['OtpController_sendOtp']
  }
  '/platform/auth/{ref}/recover': {
    /** Sends a recovery email to the given email */
    post: operations['RecoverController_sendRecover']
  }
  '/platform/auth/{ref}/templates/{template}': {
    /** Gets GoTrue template */
    get: operations['TemplateController_getTemplate']
  }
  '/platform/auth/{ref}/users': {
    /** Gets users */
    get: operations['UsersController_getUsers']
    /** Delete user with given ID */
    delete: operations['UsersController_deleteUser']
  }
  '/platform/auth/{ref}/users/{id}/factors': {
    /** Delete all factors associated to a user */
    delete: operations['FactorsController_deleteFactors']
  }
  '/platform/database/{ref}/backups': {
    /** Gets project backups */
    get: operations['BackupsController_getBackups']
  }
  '/platform/database/{ref}/backups/download': {
    /** Download project backup */
    post: operations['BackupsController_downloadBackup']
  }
  '/platform/database/{ref}/backups/restore': {
    /** Restore project backup */
    post: operations['BackupsController_restoreBackup']
  }
  '/platform/database/{ref}/backups/restore-physical': {
    /** Restore project with a physical backup */
    post: operations['BackupsController_restorePhysicalBackup']
  }
  '/platform/database/{ref}/backups/pitr': {
    /** Restore project to a previous point in time */
    post: operations['BackupsController_restorePointInTimeBackup']
  }
  '/platform/database/{ref}/hook-logs': {
    /** Gets hook logs with the given ID */
    get: operations['HooksController_getHookLogs']
  }
  '/platform/database/{ref}/hook-enable': {
    /** Enables Database Webhooks on the project */
    post: operations['HooksController_enableHooks']
  }
  '/platform/database/{ref}/owner-reassign': {
    /** Gets the status of owner reassignment */
    get: operations['OwnerController_getOwnerReassignStatus']
    /** Reassigns object owner from supabase_admin to temp */
    post: operations['OwnerController_applyOwnerReassign']
    /** Rollback object owner from temp to supabase_admin */
    delete: operations['OwnerController_rollbackOwnerReassign']
    /** Reassigns object owner from temp to postgres */
    patch: operations['OwnerController_finaliseOwnerReassign']
  }
  '/platform/organizations': {
    /** Gets user's organizations */
    get: operations['OrganizationsController_getOrganizations']
    /** Creates an organization */
    post: operations['OrganizationsController_createOrganizationWithTier']
  }
  '/platform/organizations/fly/{fly_organization_id}': {
    /** Gets organization linked to fly organization id */
    get: operations['OrganizationsController_getOrganizationByFlyOrganizationId']
  }
  '/platform/organizations/{slug}': {
    /** Deletes organization */
    delete: operations['OrganizationSlugController_deleteOrganization']
    /** Updates organization */
    patch: operations['OrganizationSlugController_updateOrganization']
  }
  '/platform/organizations/{slug}/customer': {
    /** Gets the Stripe customer */
    get: operations['CustomerController_getCustomer']
    /** Updates the Stripe customer */
    patch: operations['CustomerController_updateCustomer']
  }
  '/platform/organizations/{slug}/roles': {
    /** Gets the given organization's roles */
    get: operations['RolesController_addMember']
  }
  '/platform/organizations/{slug}/tax-ids': {
    /** Gets the given organization's tax IDs */
    get: operations['TaxIdsController_getTaxIds']
    /** Creates a tax ID for the given organization */
    post: operations['TaxIdsController_createTaxId']
    /** Delete the tax ID with the given ID */
    delete: operations['TaxIdsController_deleteTaxId']
  }
  '/platform/organizations/{slug}/transfer': {
    /** Transfers the organization to the given member */
    post: operations['TransferController_transferOrganization']
  }
  '/platform/organizations/{slug}/daily-stats': {
    /** Gets daily organization stats */
    get: operations['OrgDailyStatsController_getDailyStats']
  }
  '/platform/organizations/{slug}/usage': {
    /** Gets usage stats */
    get: operations['OrgUsageController_getDailyStats']
  }
  '/platform/organizations/{slug}/documents/standard-security-questionnaire': {
    /** Get standard security questionnaire URL */
    get: operations['OrgDocumentsController_getStandardSecurityQuestionnaireUrl']
  }
  '/platform/organizations/{slug}/documents/soc2-type-2-report': {
    /** Get SOC2 Type 2 report URL */
    get: operations['OrgDocumentsController_getSoc2Type2ReportUrl']
  }
  '/platform/organizations/{slug}/audit': {
    /** Gets an organization's audit logs */
    get: operations['OrgAuditLogsController_getAuditLogs']
  }
  '/platform/organizations/{slug}/members/invite': {
    /** Gets invited users */
    get: operations['InviteController_getInvitedUsers']
    /** Invites user */
    post: operations['InviteController_inviteUser']
    /** Delete invited user */
    delete: operations['InviteController_deleteInvitedUser']
  }
  '/platform/organizations/{slug}/members/join': {
    /** Gets invite */
    get: operations['JoinController_getInvite']
    /** Joins organization */
    post: operations['JoinController_joinOrganization']
  }
  '/platform/organizations/{slug}/members/leave': {
    /** Leaves the given organization */
    post: operations['MembersDeprecatedController_leaveOrganization']
  }
  '/platform/organizations/{slug}/members/remove': {
    /** Leaves the given organization */
    delete: operations['MembersDeprecatedController_removeMember']
  }
  '/platform/organizations/{slug}/members': {
    /** Gets organization's members */
    get: operations['MembersController_getMembers']
  }
  '/platform/organizations/{slug}/members/{gotrue_id}': {
    /** Removes organization member */
    delete: operations['MembersController_deleteMember']
    /** Updates organization member */
    patch: operations['MembersController_updateMember']
  }
  '/platform/organizations/{slug}/members/reached-free-project-limit': {
    /** Gets organization members who have reached their free project limit */
    get: operations['ReachedFreeProjectLimitController_getMembersWhoReachedFreeProjectLimit']
  }
  '/platform/organizations/{slug}/payments': {
    /** Gets Stripe payment methods for the given organization */
    get: operations['PaymentsController_getPaymentMethods']
    /** Detach Stripe payment method with the given card ID */
    delete: operations['PaymentsController_detachPaymentMethod']
  }
  '/platform/organizations/{slug}/payments/setup-intent': {
    /** Sets up a payment method */
    post: operations['SetupIntentController_setUpPaymentMethod']
  }
  '/platform/organizations/{slug}/billing/subscription': {
    /** Gets the current subscription */
    get: operations['SubscriptionController_getSubscription']
    /** Updates subscription */
    put: operations['SubscriptionController_updateSubscription']
  }
  '/platform/organizations/{slug}/billing/subscription/preview': {
    /** Preview subscription changes */
    post: operations['SubscriptionController_previewSubscriptionChange']
  }
  '/platform/organizations/{slug}/billing/subscription/schedule': {
    /** Deletes any upcoming subscription schedule */
    delete: operations['SubscriptionController_deleteSubscriptionSchedule']
  }
  '/platform/organizations/{slug}/billing/plans': {
    /** Gets subscription plans */
    get: operations['OrgPlansController_getAvailablePlans']
  }
  '/platform/organizations/{slug}/billing/invoices/upcoming': {
    /** Gets the upcoming invoice */
    get: operations['OrgInvoicesController_getUpcomingInvoice']
  }
  '/platform/pg-meta/{ref}/column-privileges': {
    /** Retrieve column privileges */
    get: operations['ColumnPrivilegesController_getColumnPrivileges']
    /** Grant column privileges */
    post: operations['ColumnPrivilegesController_grantColumnPrivileges']
    /** Revoke column privileges */
    delete: operations['ColumnPrivilegesController_revokeColumnPrivileges']
  }
  '/platform/pg-meta/{ref}/columns': {
    /** Gets project pg.columns */
    get: operations['ColumnsController_getColumns']
    /** Creates project pg.column */
    post: operations['ColumnsController_createColumn']
    /** Deletes project pg.column with the given ID */
    delete: operations['ColumnsController_deleteColumn']
    /** Updates project pg.column with the given ID */
    patch: operations['ColumnsController_updateColumn']
  }
  '/platform/pg-meta/{ref}/extensions': {
    /** Gets project pg.extensions */
    get: operations['ExtensionsController_getExtensions']
    /** Creates project pg.extension */
    post: operations['ExtensionsController_createExtension']
    /** Deletes project pg.extension with the given ID */
    delete: operations['ExtensionsController_deleteExtension']
  }
  '/platform/pg-meta/{ref}/foreign-tables': {
    /** Retrieve database foreign tables */
    get: operations['ForeignTablesController_getForeignTables']
  }
  '/platform/pg-meta/{ref}/functions': {
    /** Gets project pg.functions */
    get: operations['FunctionsController_getFunctions']
    /** Creates project pg.function */
    post: operations['FunctionsController_createFunction']
    /** Deletes project pg.function with the given ID */
    delete: operations['FunctionsController_deleteFunction']
    /** Updates project pg.function with the given ID */
    patch: operations['FunctionsController_updateFunction']
  }
  '/platform/pg-meta/{ref}/materialized-views': {
    /** Retrieve database materialized views */
    get: operations['MaterializedViewsController_getMaterializedViews']
  }
  '/platform/pg-meta/{ref}/policies': {
    /** Gets project pg.policies */
    get: operations['PoliciesController_getPolicies']
    /** Creates project pg.policy */
    post: operations['PoliciesController_createPolicy']
    /** Deletes project pg.policy with the given ID */
    delete: operations['PoliciesController_deletePolicy']
    /** Updates project pg.policy with the given ID */
    patch: operations['PoliciesController_updatePolicy']
  }
  '/platform/pg-meta/{ref}/publications': {
    /** Gets project pg.publications */
    get: operations['PublicationsController_getPublications']
    /** Gets project pg.publications */
    post: operations['PublicationsController_createPublication']
    /** Deletes project pg.publication with the given ID */
    delete: operations['PublicationsController_deletePublication']
    /** Updates project pg.publication with the given ID */
    patch: operations['PublicationsController_updatePublication']
  }
  '/platform/pg-meta/{ref}/query': {
    /** Run sql query */
    post: operations['QueryController_runQuery']
  }
  '/platform/pg-meta/{ref}/query/format': {
    /** Format sql query */
    post: operations['QueryController_formatQuery']
  }
  '/platform/pg-meta/{ref}/query/validate': {
    /** Validate sql query */
    post: operations['QueryController_validateQuery']
  }
  '/platform/pg-meta/{ref}/roles': {
    /** Gets project pg.roles */
    get: operations['RolesController_getRoles']
    /** Creates project pg.role */
    post: operations['RolesController_createRole']
    /** Deletes project pg.role with the given ID */
    delete: operations['RolesController_deleteRole']
    /** Updates project pg.role with the given ID */
    patch: operations['RolesController_updateRole']
  }
  '/platform/pg-meta/{ref}/schemas': {
    /** Gets project pg.schemas */
    get: operations['SchemasController_getSchemas']
    /** Creates project pg.schema */
    post: operations['SchemasController_createSchema']
    /** Deletes project pg.schema with the given ID */
    delete: operations['SchemasController_deleteSchema']
    /** Updates project pg.schema with the given ID */
    patch: operations['SchemasController_updateSchema']
  }
  '/platform/pg-meta/{ref}/search/tables': {
    /** Searches project pg.tables. Return maximum 50 results. */
    post: operations['SearchController_searchTables']
  }
  '/platform/pg-meta/{ref}/search/columns': {
    /** Searches project pg.columns. Return maximum 50 results. */
    post: operations['SearchController_searchColumns']
  }
  '/platform/pg-meta/{ref}/table-privileges': {
    /** Retrieve table privileges */
    get: operations['TablePrivilegesController_getTablePrivileges']
    /** Grant table privileges */
    post: operations['TablePrivilegesController_grantTablePrivileges']
    /** Revoke table privileges */
    delete: operations['TablePrivilegesController_revokeTablePrivileges']
  }
  '/platform/pg-meta/{ref}/tables': {
    /** Gets project pg.tables or pg.table with the given ID */
    get: operations['TablesController_getTables']
    /** Creates project pg.table */
    post: operations['TablesController_createTable']
    /** Deletes project pg.table with the given ID */
    delete: operations['TablesController_deleteTable']
    /** Updates project pg.table with the given ID */
    patch: operations['TablesController_updateTable']
  }
  '/platform/pg-meta/{ref}/triggers': {
    /** Gets project pg.triggers */
    get: operations['TriggersController_getTriggers']
    /** Creates project pg.trigger */
    post: operations['TriggersController_createTrigger']
    /** Deletes project pg.trigger with the given ID */
    delete: operations['TriggersController_deleteTrigger']
    /** Updates project pg.trigger with the given ID */
    patch: operations['TriggersController_updateTrigger']
  }
  '/platform/pg-meta/{ref}/types': {
    /** Gets project pg.types */
    get: operations['TypesController_getTypes']
  }
  '/platform/pg-meta/{ref}/views': {
    /** Retrieve database views */
    get: operations['ViewsController_getViews']
  }
  '/platform/profile/access-tokens': {
    /** Gets the user's access tokens */
    get: operations['AccessTokensController_getAccessTokens']
    /** Creates a new access token */
    post: operations['AccessTokensController_createAccessToken']
  }
  '/platform/profile/access-tokens/{id}': {
    /** Gets the access token with the given ID */
    get: operations['AccessTokensController_getAccessToken']
    /** Deletes the access token with the given ID */
    delete: operations['AccessTokensController_deleteAccessToken']
  }
  '/platform/profile/audit': {
    /** Gets a user's audit logs */
    get: operations['UserAuditLogsController_getAuditLogs']
  }
  '/platform/profile/search': {
    /** Search profiles by username, email with the given keywords */
    post: operations['SearchProfileController_searchProfile']
  }
  '/platform/profile/subscriptions': {
    /** Gets the user's subscription statistics */
    get: operations['SubscriptionsController_getSubscriptionsStatistics']
  }
  '/platform/profile/password-check': {
    /** Check password strength */
    post: operations['PasswordCheckController_checkPassword']
  }
  '/platform/profile/permissions': {
    /** Gets all the user's permissions */
    get: operations['PermissionsController_getPermissions']
  }
  '/platform/profile': {
    /** Gets the user's profile */
    get: operations['ProfileController_getProfile']
    /** Creates user's profile */
    post: operations['ProfileController_createProfile']
    /** Deletes user's profile */
    delete: operations['ProfileController_deleteProfile']
    /** Updates user's profile */
    patch: operations['ProfileController_updateProfile']
  }
  '/platform/projects': {
    /**
     * Gets all projects that belong to the authenticated user
     * @description Only returns the minimal project info
     */
    get: operations['ProjectsController_getProjects']
    /** Creates a project */
    post: operations['ProjectsController_createProject']
  }
  '/platform/projects/fly/{fly_extension_id}': {
    /** Gets project linked to fly extension id */
    get: operations['ProjectsController_getProjectByFlyExtensionId']
  }
  '/platform/projects/{ref}/content': {
    /** Gets project's content */
    get: operations['ContentController_getContent']
    /** Updates project's content */
    put: operations['ContentController_updateWholeContent']
    /** Creates project's content */
    post: operations['ContentController_createContent']
    /** Deletes project's content */
    delete: operations['ContentController_deleteContent']
    /** Updates project's content */
    patch: operations['ContentController_updateContent']
  }
  '/platform/projects/{ref}/daily-stats': {
    /** Gets daily project stats */
    get: operations['DailyStatsController_getDailyStats']
  }
  '/platform/projects/{ref}/db-password': {
    /** Updates the database password */
    patch: operations['DbPasswordController_updatePassword']
  }
  '/platform/projects/{ref}/live': {
    /** Gets project health check */
    get: operations['HealthCheckController_projectHealthCheck']
  }
  '/platform/projects/{ref}/api/rest': {
    /** Gets project OpenApi */
    get: operations['ApiController_projectOpenApi']
  }
  '/platform/projects/{ref}/api/graphql': {
    /** Queries project Graphql */
    post: operations['ApiController_projectGraphql']
  }
  '/platform/projects/{ref}/infra-monitoring': {
    /** Gets project's usage metrics */
    get: operations['InfraMonitoringController_getUsageMetrics']
  }
  '/platform/projects/{ref}/invoices': {
    /** Gets project's invoices */
    get: operations['InvoicesController_getInvoices']
    /** Gets project's invoice count */
    head: operations['InvoicesController_getInvoiceCount']
  }
  '/platform/projects/{ref}/pause': {
    /** Pauses the project */
    post: operations['PauseController_pauseProject']
  }
  '/platform/projects/{ref}/resize': {
    /** Resize database disk */
    post: operations['ResizeController_resizeDatabase']
  }
  '/platform/projects/{ref}/restart': {
    /** Restarts project */
    post: operations['RestartController_restartProject']
  }
  '/platform/projects/{ref}': {
    /** Gets a specific project that belongs to the authenticated user */
    get: operations['ProjectsRefController_getProject']
    /** Deletes the given project */
    delete: operations['ProjectsRefController_deleteProject']
    /** Updates the given project */
    patch: operations['ProjectsRefController_updateProject']
  }
  '/platform/projects/{ref}/restore': {
    /** Restores project */
    post: operations['RestoreController_restoreProject']
  }
  '/platform/projects/{ref}/restart-services': {
    /** Restarts given services */
    post: operations['RestartServicesController_restartServices']
  }
  '/platform/projects/{ref}/settings': {
    /** Gets project's settings */
    get: operations['SettingsController_getProjectApi']
  }
  '/platform/projects/{ref}/status': {
    /** Gets project's status */
    get: operations['StatusController_getStatus']
  }
  '/platform/projects/{ref}/update': {
    /**
     * Updates the project
     * @deprecated
     * @description Replaced by PATCH /platform/projects/:ref
     */
    post: operations['UpdateController_updateProject']
  }
  '/platform/projects/{ref}/transfer/preview': {
    /** Previews transfering a project to a different organizations, shows eligibility and impact. */
    post: operations['ProjectTransferController_previewTransfer']
  }
  '/platform/projects/{ref}/transfer': {
    /** Transfers a project to a different organization. */
    post: operations['ProjectTransferController_transferProject']
  }
  '/platform/projects/{ref}/analytics/endpoints/functions.inv-stats': {
    /** Gets a project's function invocation statistics */
    get: operations['FunctionInvocationLogsController_getStatus']
  }
  '/platform/projects/{ref}/analytics/endpoints/functions.req-stats': {
    /** Gets a project's function request statistics */
    get: operations['FunctionRequestLogsController_getStatus']
  }
  '/platform/projects/{ref}/analytics/endpoints/functions.resource-usage': {
    /** Gets a project's function resource usage */
    get: operations['FunctionResourceLogsController_getStatus']
  }
  '/platform/projects/{ref}/analytics/endpoints/logs.all': {
    /** Gets project's logs */
    get: operations['LogsController_getApiPaths']
  }
  '/platform/projects/{ref}/analytics/endpoints/usage.api-counts': {
    /** Gets project's usage api counts */
    get: operations['UsageApiController_getApiCounts']
  }
  '/platform/projects/{ref}/analytics/endpoints/usage.api-requests-count': {
    /** Gets project's usage api requests count */
    get: operations['UsageApiController_getApiRequestsCount']
  }
  '/platform/projects/{ref}/config/pgbouncer': {
    /** Gets project's pgbouncer config */
    get: operations['PgbouncerConfigController_getPgbouncerConfig']
    /** Updates project's pgbouncer config */
    patch: operations['PgbouncerConfigController_updatePgbouncerConfig']
  }
  '/platform/projects/{ref}/config/postgrest': {
    /** Gets project's postgrest config */
    get: operations['PostgrestConfigController_getPostgRESTConfig']
    /** Updates project's postgrest config */
    patch: operations['PostgrestConfigController_updatePostgRESTConfig']
  }
  '/platform/projects/{ref}/config/postgres': {
    /** Gets project's Postgres config */
    get: operations['PostgresConfigController_getConfig']
    /** Updates project's Postgres config */
    put: operations['PostgresConfigController_updateConfig']
  }
  '/platform/projects/{ref}/config/secrets': {
    /** Updates project's secrets config */
    patch: operations['SecretsConfigController_updateConfig']
  }
  '/platform/projects/{ref}/config/storage': {
    /** Gets project's storage config */
    get: operations['StorageConfigController_getConfig']
    /** Updates project's storage config */
    patch: operations['StorageConfigController_updateConfig']
  }
  '/platform/projects/{ref}/billing/addons': {
    /** Gets project addons */
    get: operations['ProjectAddonController_getProjectAddons']
    /** Updates project addon */
    post: operations['ProjectAddonController_updateAddon']
  }
  '/platform/projects/{ref}/billing/addons/{addon_variant}': {
    /** Removes project addon */
    delete: operations['ProjectAddonController_removeAddon']
  }
  '/platform/props/project/{ref}/api': {
    /**
     * Gets project's api info
     * @deprecated
     */
    get: operations['ApiController_getProjectApi']
  }
  '/platform/props/project/{ref}/jwt-secret-update-status': {
    /** Gets the last JWT secret update status */
    get: operations['JwtSecretUpdateStatusController_getJwtSecretUpdateStatus']
  }
  '/platform/props/project/{ref}/settings': {
    /**
     * Gets project's settings
     * @deprecated
     */
    get: operations['SettingsController_getProjectApi']
  }
  '/platform/storage/{ref}/buckets/{id}': {
    /** Gets bucket */
    get: operations['StorageBucketIdController_getBucket']
    /** Deletes bucket */
    delete: operations['StorageBucketIdController_deleteBucket']
    /** Updates bucket */
    patch: operations['StorageBucketIdController_updateBucket']
  }
  '/platform/storage/{ref}/buckets/{id}/empty': {
    /** Removes all objects inside a single bucket. */
    post: operations['StorageBucketIdController_emptyBucket']
  }
  '/platform/storage/{ref}/buckets': {
    /** Gets list of buckets */
    get: operations['StorageBucketsController_getBuckets']
    /** Create bucket */
    post: operations['StorageBucketsController_createBucket']
  }
  '/platform/storage/{ref}/buckets/{id}/objects/list': {
    /** Gets list of objects with the given bucket */
    post: operations['StorageObjectsController_getObjects']
  }
  '/platform/storage/{ref}/buckets/{id}/objects/public-url': {
    /** Creates URL for an asset in a public bucket */
    post: operations['StorageObjectsController_createPublicUrl']
  }
  '/platform/storage/{ref}/buckets/{id}/objects/download': {
    /** Downloads a file from a private bucket */
    post: operations['StorageObjectsController_download']
  }
  '/platform/storage/{ref}/buckets/{id}/objects/sign': {
    /** Creates a signed URL */
    post: operations['StorageObjectsController_createSignedUrl']
  }
  '/platform/storage/{ref}/buckets/{id}/objects/sign-multi': {
    /** Gets multiple signed URLs */
    post: operations['StorageObjectsController_createSignedUrls']
  }
  '/platform/storage/{ref}/buckets/{id}/objects/copy': {
    /** Copys object */
    post: operations['StorageObjectsController_copyObject']
  }
  '/platform/storage/{ref}/buckets/{id}/objects/move': {
    /** Move object */
    post: operations['StorageObjectsController_moveObject']
  }
  '/platform/storage/{ref}/buckets/{id}/objects': {
    /** Deletes objects */
    delete: operations['StorageObjectsController_deleteObjects']
  }
  '/platform/stripe/invoices': {
    /** Gets invoices for the given customer */
    get: operations['InvoicesController_getInvoices']
    /** Gets the total count of invoices for the given customer */
    head: operations['InvoicesController_countInvoices']
  }
  '/platform/stripe/invoices/overdue': {
    /** Gets information about overdue invoices that relate to the authenticated user */
    get: operations['InvoicesController_getOverdueInvoices']
  }
  '/platform/stripe/invoices/{id}': {
    /** Gets invoice with the given invoice ID */
    get: operations['InvoicesController_getInvoice']
  }
  '/platform/stripe/setup-intent': {
    /** Sets up a payment method */
    post: operations['SetupIntentController_setUpPaymentMethod']
  }
  '/platform/telemetry/event': {
    /** Sends analytics server event */
    post: operations['TelemetryEventController_sendServerEvent']
  }
  '/platform/telemetry/identify': {
    /** Send analytics identify event */
    post: operations['TelemetryIdentifyController_identify']
  }
  '/platform/telemetry/page': {
    /** Send server page event */
    post: operations['TelemetryPageController_sendServerPage']
  }
  '/platform/telemetry/activity': {
    /** Sends mixpanel server activity */
    post: operations['TelemetryActivityController_sendServerActivity']
  }
  '/platform/telemetry/pageview': {
    /** Send mixpanel page event */
    post: operations['TelemetryPageviewController_sendServerPageViewed']
  }
  '/platform/vercel/token': {
    /** Gets the Vercel access token for the given code */
    get: operations['VercelAccessTokenController_getAccessToken']
  }
  '/platform/vercel/projects': {
    /** Gets the project with the given ID if provided, otherwise gets the list of projects */
    get: operations['VercelProjectsController_getVercelProjects']
  }
  '/platform/vercel/projects/envs': {
    /** Gets the environment variables for the given project ID on behalf of the given team ID */
    get: operations['VercelEnvironmentVariablesController_getEnvironmentVariables']
    /** Creates the environment variable for the given project ID on behalf of the given team ID */
    post: operations['VercelEnvironmentVariablesController_createEnvironmentVariable']
  }
  '/platform/integrations': {
    /** Gets user's integrations */
    get: operations['IntegrationsController_getProjectConnections']
  }
  '/platform/integrations/{slug}': {
    /** Gets integration with the given organization slug */
    get: operations['IntegrationsController_getProjectConnectionsForOrg']
  }
  '/platform/integrations/vercel': {
    /**
     * Create vercel integration
     * @description Exchanges a vercel code for an access token and saves the access token to the new integration record
     */
    post: operations['VercelIntegrationController_createVercelIntegration']
  }
  '/platform/integrations/vercel/{organization_integration_id}': {
    /** Removes Vercel organization integration with the given id */
    delete: operations['VercelIntegrationController_removeVercelIntegration']
  }
  '/platform/integrations/vercel/projects/{organization_integration_id}': {
    /** Gets vercel projects with the given organization integration id */
    get: operations['VercelProjectController_getVercelProjects']
  }
  '/platform/integrations/vercel/connections/{organization_integration_id}': {
    /** Gets installed vercel project connections for the given organization integration */
    get: operations['VercelConnectionsController_getVercelConnections']
  }
  '/platform/integrations/vercel/connections': {
    /** Connects a Vercel project to a supabase project */
    post: operations['VercelConnectionsController_createVercelConnection']
  }
  '/platform/integrations/vercel/connections/{connection_id}/sync-envs': {
    /** Syncs supabase project envs with given connection id */
    post: operations['VercelConnectionsController_syncVercelConnectionEnvs']
  }
  '/platform/integrations/vercel/connections/{connection_id}': {
    /** Deletes vercel project connection */
    delete: operations['VercelConnectionsController_deleteVercelConnection']
    /** Updates a Vercel connection for a supabase project */
    patch: operations['VercelConnectionsController_updateVercelConnection']
  }
  '/platform/integrations/github': {
    /** Create github integration */
    post: operations['GitHubIntegrationController_createGitHubIntegration']
  }
  '/platform/integrations/github/connections/{organization_integration_id}': {
    /** Gets installed github project connections for the given organization integration */
    get: operations['GitHubConnectionsController_getGitHubConnections']
  }
  '/platform/integrations/github/connections': {
    /** Connects a GitHub project to a supabase project */
    post: operations['GitHubConnectionsController_createGitHubConnection']
  }
  '/platform/integrations/github/connections/{connection_id}': {
    /** Deletes github project connection */
    delete: operations['GitHubConnectionsController_deleteGitHubConnection']
    /** Updates a GitHub connection for a supabase project */
    patch: operations['GitHubConnectionsController_updateGitHubConnection']
  }
  '/platform/integrations/github/repos/{organization_integration_id}': {
    /** Gets github repos for the given organization */
    get: operations['GitHubRepoController_getRepos']
  }
  '/platform/integrations/github/branches/{organization_integration_id}/{repo_owner}/{repo_name}': {
    /** Gets github branches for a given repo */
    get: operations['GitHubBranchController_getBranches']
  }
  '/platform/integrations/github/branches/{organization_integration_id}/{repo_owner}/{repo_name}/{branch_name}': {
    /** Gets a specific github branch for a given repo */
    get: operations['GitHubBranchController_getBranchByName']
  }
  '/platform/integrations/github/pull-requests/{organization_integration_id}/{repo_owner}/{repo_name}': {
    /** Gets github pull requests for a given repo */
    get: operations['GitHubPullRequestController_getPullRequestsByNumber']
  }
  '/platform/integrations/github/pull-requests/{organization_integration_id}/{repo_owner}/{repo_name}/{target}': {
    /** Gets github pull requests for a given repo */
    get: operations['GitHubPullRequestController_getPullRequests']
  }
  '/platform/cli/login': {
    /** Create CLI login session */
    post: operations['CliLoginController_createCliLoginSession']
  }
  '/platform/cli/login/{session_id}': {
    /** Retrieve CLI login session */
    get: operations['CliLoginController_getCliLoginSession']
  }
  '/system/auth/{ref}/templates/{template}': {
    /** Gets GoTrue template */
    get: operations['AuthTemplateController_getTemplate']
  }
  '/system/database/{ref}/owner/owner-reassign': {
    /** Gets the status of owner reassignment */
    get: operations['DatabaseOwnerController_getOwnerReassignStatus']
    /** Reassigns object owner from supabase_admin to temp */
    post: operations['DatabaseOwnerController_applyOwnerReassign']
    /** Rollback object owner from temp to supabase_admin */
    delete: operations['DatabaseOwnerController_rollbackOwnerReassign']
    /** Reassigns object owner from temp to postgres */
    patch: operations['DatabaseOwnerController_finaliseOwnerReassign']
  }
  '/system/github-secret-alert': {
    /** Reset JWT if leaked keys found by GitHub secret scanning */
    post: operations['GithubSecretAlertController_resetJwt']
  }
  '/system/projects/{ref}/functions': {
    /**
     * List all functions
     * @description Returns all functions you've previously added to the specified project.
     */
    get: operations['SystemFunctionsController_getFunctions']
    /** Deletes all Edge Functions from a project */
    delete: operations['SystemFunctionsController_systemDeleteAllFunctions']
  }
  '/system/projects/{ref}/secrets': {
    /**
     * List all secrets
     * @description Returns all secrets you've previously added to the specified project.
     */
    get: operations['SystemSecretsController_getSecrets']
    /**
     * Bulk create secrets
     * @description Creates multiple secrets and adds them to the specified project.
     */
    post: operations['SystemSecretsController_createSecrets']
    /**
     * Bulk delete secrets
     * @description Deletes all secrets with the given names from the specified project
     */
    delete: operations['SystemSecretsController_deleteSecrets']
  }
  '/system/projects/{ref}/secrets/refresh': {
    /** Refreshes secrets */
    post: operations['SecretsRefreshController_refreshSecrets']
  }
  '/system/projects/{ref}/health-reporting': {
    /** Updates a project's health status. */
    put: operations['HealthReportingController_updateStatus']
  }
  '/system/projects/{ref}/ha-events': {
    /** Records an HA event */
    put: operations['HaEventsController_updateStatus']
  }
  '/system/projects/{ref}/credentials/aws': {
    /** Allows a project to obtain temporary credentials. */
    post: operations['AwsCredentialsController_getTemporaryCredentials']
  }
  '/system/projects/{ref}/billing/addons': {
    /** Updates project addon */
    post: operations['AddonsController_updateAddon']
  }
  '/system/projects/{ref}/billing/addons/{addon_variant}': {
    /** Removes project addon */
    delete: operations['AddonsController_removeAddon']
  }
  '/system/projects/{ref}/config/update-jwt/complete': {
    /** Handle update project jwt on completion */
    post: operations['ProjectUpdateJwtController_completeUpdateJwt']
  }
  '/system/projects': {
    /** Create a project */
    post: operations['ProjectsController_createProject']
  }
  '/system/organizations/{slug}/usage': {
    /** Gets usage stats */
    get: operations['OrgUsageSystemController_getDailyStats']
  }
  '/system/organizations/{slug}/billing/subscription': {
    /** Gets the current subscription */
    get: operations['OrgSubscriptionSystemController_getSubscription']
    /** Updates subscription */
    put: operations['OrgSubscriptionSystemController_updateSubscription']
  }
  '/system/integrations/vercel/webhooks': {
    /** Processes Vercel event */
    post: operations['VercelWebhooksController_processEvent']
  }
  '/system/integrations/github/webhooks': {
    /** Processes GitHub event */
    post: operations['GitHubWebhooksController_processEvent']
  }
  '/system/stripe/webhooks-v2': {
    /** Processes Stripe event */
    post: operations['StripeWebhooksController_processEvent']
  }
  '/system/stripe/webhooks': {
    /** Processes Stripe event */
    post: operations['StripeWebhooksController_processEvent']
  }
  '/v0/notifications': {
    /** Get notifications */
    get: operations['NotificationsController_getNotificationsV2']
    /** Delete notifications */
    delete: operations['NotificationsController_deleteNotifications']
    /** Update notifications */
    patch: operations['NotificationsController_updateNotificationsV2']
  }
  '/v0/status': {
    /** Get infrastructure status */
    get: operations['StatusController_getStatus']
  }
  '/v0/auth/{ref}/config': {
    /** Gets GoTrue config */
    get: operations['GoTrueConfigController_getGoTrueConfig']
    /** Updates GoTrue config */
    patch: operations['GoTrueConfigController_updateGoTrueConfig']
  }
  '/v0/auth/{ref}/invite': {
    /** Sends an invite to the given email */
    post: operations['InviteController_sendInvite']
  }
  '/v0/auth/{ref}/magiclink': {
    /** Sends a magic link to the given email */
    post: operations['MagicLinkController_sendMagicLink']
  }
  '/v0/auth/{ref}/otp': {
    /** Sends an OTP to the given phone number */
    post: operations['OtpController_sendOtp']
  }
  '/v0/auth/{ref}/recover': {
    /** Sends a recovery email to the given email */
    post: operations['RecoverController_sendRecover']
  }
  '/v0/auth/{ref}/templates/{template}': {
    /** Gets GoTrue template */
    get: operations['TemplateController_getTemplate']
  }
  '/v0/auth/{ref}/users': {
    /** Gets users */
    get: operations['UsersController_getUsers']
    /** Delete user with given ID */
    delete: operations['UsersController_deleteUser']
  }
  '/v0/auth/{ref}/users/{id}/factors': {
    /** Delete all factors associated to a user */
    delete: operations['FactorsController_deleteFactors']
  }
  '/v0/database/{ref}/backups': {
    /** Gets project backups */
    get: operations['BackupsController_getBackups']
  }
  '/v0/database/{ref}/backups/download': {
    /** Download project backup */
    post: operations['BackupsController_downloadBackup']
  }
  '/v0/database/{ref}/backups/restore': {
    /** Restore project backup */
    post: operations['BackupsController_restoreBackup']
  }
  '/v0/database/{ref}/backups/restore-physical': {
    /** Restore project with a physical backup */
    post: operations['BackupsController_restorePhysicalBackup']
  }
  '/v0/database/{ref}/backups/pitr': {
    /** Restore project to a previous point in time */
    post: operations['BackupsController_restorePointInTimeBackup']
  }
  '/v0/database/{ref}/hook-logs': {
    /** Gets hook logs with the given ID */
    get: operations['HooksController_getHookLogs']
  }
  '/v0/database/{ref}/hook-enable': {
    /** Enables Database Webhooks on the project */
    post: operations['HooksController_enableHooks']
  }
  '/v0/organizations': {
    /** Gets user's organizations */
    get: operations['OrganizationsController_getOrganizations']
    /** Creates an organization */
    post: operations['OrganizationsController_createOrganizationWithTier']
  }
  '/v0/organizations/fly/{fly_organization_id}': {
    /** Gets organization linked to fly organization id */
    get: operations['OrganizationsController_getOrganizationByFlyOrganizationId']
  }
  '/v0/organizations/{slug}': {
    /** Deletes organization */
    delete: operations['OrganizationSlugController_deleteOrganization']
    /** Updates organization */
    patch: operations['OrganizationSlugController_updateOrganization']
  }
  '/v0/organizations/{slug}/roles': {
    /** Gets the given organization's roles */
    get: operations['RolesController_addMember']
  }
  '/v0/organizations/{slug}/members/invite': {
    /** Gets invited users */
    get: operations['InviteController_getInvitedUsers']
    /** Invites user */
    post: operations['InviteController_inviteUser']
    /** Delete invited user */
    delete: operations['InviteController_deleteInvitedUser']
  }
  '/v0/organizations/{slug}/members/join': {
    /** Gets invite */
    get: operations['JoinController_getInvite']
    /** Joins organization */
    post: operations['JoinController_joinOrganization']
  }
  '/v0/organizations/{slug}/members': {
    /** Gets organization's members */
    get: operations['MembersController_getMembers']
  }
  '/v0/organizations/{slug}/members/{gotrue_id}': {
    /** Removes organization member */
    delete: operations['MembersController_deleteMember']
    /** Updates organization member */
    patch: operations['MembersController_updateMember']
  }
  '/v0/pg-meta/{ref}/column-privileges': {
    /** Retrieve column privileges */
    get: operations['ColumnPrivilegesController_getColumnPrivileges']
    /** Grant column privileges */
    post: operations['ColumnPrivilegesController_grantColumnPrivileges']
    /** Revoke column privileges */
    delete: operations['ColumnPrivilegesController_revokeColumnPrivileges']
  }
  '/v0/pg-meta/{ref}/columns': {
    /** Gets project pg.columns */
    get: operations['ColumnsController_getColumns']
    /** Creates project pg.column */
    post: operations['ColumnsController_createColumn']
    /** Deletes project pg.column with the given ID */
    delete: operations['ColumnsController_deleteColumn']
    /** Updates project pg.column with the given ID */
    patch: operations['ColumnsController_updateColumn']
  }
  '/v0/pg-meta/{ref}/extensions': {
    /** Gets project pg.extensions */
    get: operations['ExtensionsController_getExtensions']
    /** Creates project pg.extension */
    post: operations['ExtensionsController_createExtension']
    /** Deletes project pg.extension with the given ID */
    delete: operations['ExtensionsController_deleteExtension']
  }
  '/v0/pg-meta/{ref}/foreign-tables': {
    /** Retrieve database foreign tables */
    get: operations['ForeignTablesController_getForeignTables']
  }
  '/v0/pg-meta/{ref}/functions': {
    /** Gets project pg.functions */
    get: operations['FunctionsController_getFunctions']
    /** Creates project pg.function */
    post: operations['FunctionsController_createFunction']
    /** Deletes project pg.function with the given ID */
    delete: operations['FunctionsController_deleteFunction']
    /** Updates project pg.function with the given ID */
    patch: operations['FunctionsController_updateFunction']
  }
  '/v0/pg-meta/{ref}/materialized-views': {
    /** Retrieve database materialized views */
    get: operations['MaterializedViewsController_getMaterializedViews']
  }
  '/v0/pg-meta/{ref}/policies': {
    /** Gets project pg.policies */
    get: operations['PoliciesController_getPolicies']
    /** Creates project pg.policy */
    post: operations['PoliciesController_createPolicy']
    /** Deletes project pg.policy with the given ID */
    delete: operations['PoliciesController_deletePolicy']
    /** Updates project pg.policy with the given ID */
    patch: operations['PoliciesController_updatePolicy']
  }
  '/v0/pg-meta/{ref}/publications': {
    /** Gets project pg.publications */
    get: operations['PublicationsController_getPublications']
    /** Gets project pg.publications */
    post: operations['PublicationsController_createPublication']
    /** Deletes project pg.publication with the given ID */
    delete: operations['PublicationsController_deletePublication']
    /** Updates project pg.publication with the given ID */
    patch: operations['PublicationsController_updatePublication']
  }
  '/v0/pg-meta/{ref}/query': {
    /** Run sql query */
    post: operations['QueryController_runQuery']
  }
  '/v0/pg-meta/{ref}/query/format': {
    /** Format sql query */
    post: operations['QueryController_formatQuery']
  }
  '/v0/pg-meta/{ref}/query/validate': {
    /** Validate sql query */
    post: operations['QueryController_validateQuery']
  }
  '/v0/pg-meta/{ref}/roles': {
    /** Gets project pg.roles */
    get: operations['RolesController_getRoles']
    /** Creates project pg.role */
    post: operations['RolesController_createRole']
    /** Deletes project pg.role with the given ID */
    delete: operations['RolesController_deleteRole']
    /** Updates project pg.role with the given ID */
    patch: operations['RolesController_updateRole']
  }
  '/v0/pg-meta/{ref}/schemas': {
    /** Gets project pg.schemas */
    get: operations['SchemasController_getSchemas']
    /** Creates project pg.schema */
    post: operations['SchemasController_createSchema']
    /** Deletes project pg.schema with the given ID */
    delete: operations['SchemasController_deleteSchema']
    /** Updates project pg.schema with the given ID */
    patch: operations['SchemasController_updateSchema']
  }
  '/v0/pg-meta/{ref}/search/tables': {
    /** Searches project pg.tables. Return maximum 50 results. */
    post: operations['SearchController_searchTables']
  }
  '/v0/pg-meta/{ref}/search/columns': {
    /** Searches project pg.columns. Return maximum 50 results. */
    post: operations['SearchController_searchColumns']
  }
  '/v0/pg-meta/{ref}/table-privileges': {
    /** Retrieve table privileges */
    get: operations['TablePrivilegesController_getTablePrivileges']
    /** Grant table privileges */
    post: operations['TablePrivilegesController_grantTablePrivileges']
    /** Revoke table privileges */
    delete: operations['TablePrivilegesController_revokeTablePrivileges']
  }
  '/v0/pg-meta/{ref}/tables': {
    /** Gets project pg.tables or pg.table with the given ID */
    get: operations['TablesController_getTables']
    /** Creates project pg.table */
    post: operations['TablesController_createTable']
    /** Deletes project pg.table with the given ID */
    delete: operations['TablesController_deleteTable']
    /** Updates project pg.table with the given ID */
    patch: operations['TablesController_updateTable']
  }
  '/v0/pg-meta/{ref}/triggers': {
    /** Gets project pg.triggers */
    get: operations['TriggersController_getTriggers']
    /** Creates project pg.trigger */
    post: operations['TriggersController_createTrigger']
    /** Deletes project pg.trigger with the given ID */
    delete: operations['TriggersController_deleteTrigger']
    /** Updates project pg.trigger with the given ID */
    patch: operations['TriggersController_updateTrigger']
  }
  '/v0/pg-meta/{ref}/types': {
    /** Gets project pg.types */
    get: operations['TypesController_getTypes']
  }
  '/v0/pg-meta/{ref}/views': {
    /** Retrieve database views */
    get: operations['ViewsController_getViews']
  }
  '/v0/projects': {
    /**
     * Gets all projects that belong to the authenticated user
     * @description Only returns the minimal project info
     */
    get: operations['ProjectsController_getProjects']
    /** Creates a project */
    post: operations['ProjectsController_createProject']
  }
  '/v0/projects/fly/{fly_extension_id}': {
    /** Gets project linked to fly extension id */
    get: operations['ProjectsController_getProjectByFlyExtensionId']
  }
  '/v0/projects/metrics': {
    /**
     * Get metrics
     * @description At most 50 projects can be queried at a time.
     * Currently supports '1d', '3d', and '7d' intervals.
     */
    get: operations['V0ProjectsMetricsController_getProjectsMetrics']
  }
  '/v0/projects/{ref}/content': {
    /** Gets project's content */
    get: operations['ContentController_getContent']
    /** Updates project's content */
    put: operations['ContentController_updateWholeContent']
    /** Creates project's content */
    post: operations['ContentController_createContent']
    /** Deletes project's content */
    delete: operations['ContentController_deleteContent']
    /** Updates project's content */
    patch: operations['ContentController_updateContent']
  }
  '/v0/projects/{ref}/daily-stats': {
    /** Gets daily project stats */
    get: operations['DailyStatsController_getDailyStats']
  }
  '/v0/projects/{ref}/db-password': {
    /** Updates the database password */
    patch: operations['DbPasswordController_updatePassword']
  }
  '/v0/projects/{ref}/live': {
    /** Gets project health check */
    get: operations['HealthCheckController_projectHealthCheck']
  }
  '/v0/projects/{ref}/api/rest': {
    /** Gets project OpenApi */
    get: operations['ApiController_projectOpenApi']
  }
  '/v0/projects/{ref}/api/graphql': {
    /** Queries project Graphql */
    post: operations['ApiController_projectGraphql']
  }
  '/v0/projects/{ref}/infra-monitoring': {
    /** Gets project's usage metrics */
    get: operations['InfraMonitoringController_getUsageMetrics']
  }
  '/v0/projects/{ref}/invoices': {
    /** Gets project's invoices */
    get: operations['InvoicesController_getInvoices']
    /** Gets project's invoice count */
    head: operations['InvoicesController_getInvoiceCount']
  }
  '/v0/projects/{ref}/pause': {
    /** Pauses the project */
    post: operations['PauseController_pauseProject']
  }
  '/v0/projects/{ref}/resize': {
    /** Resize database disk */
    post: operations['ResizeController_resizeDatabase']
  }
  '/v0/projects/{ref}/restart': {
    /** Restarts project */
    post: operations['RestartController_restartProject']
  }
  '/v0/projects/{ref}': {
    /** Gets a specific project that belongs to the authenticated user */
    get: operations['ProjectsRefController_getProject']
    /** Deletes the given project */
    delete: operations['ProjectsRefController_deleteProject']
    /** Updates the given project */
    patch: operations['ProjectsRefController_updateProject']
  }
  '/v0/projects/{ref}/restore': {
    /** Restores project */
    post: operations['RestoreController_restoreProject']
  }
  '/v0/projects/{ref}/restart-services': {
    /** Restarts given services */
    post: operations['RestartServicesController_restartServices']
  }
  '/v0/projects/{ref}/settings': {
    /** Gets project's settings */
    get: operations['SettingsController_getProjectApi']
  }
  '/v0/projects/{ref}/status': {
    /** Gets project's status */
    get: operations['StatusController_getStatus']
  }
  '/v0/projects/{ref}/analytics/endpoints/functions.inv-stats': {
    /** Gets a project's function invocation statistics */
    get: operations['FunctionInvocationLogsController_getStatus']
  }
  '/v0/projects/{ref}/analytics/endpoints/functions.req-stats': {
    /** Gets a project's function request statistics */
    get: operations['FunctionRequestLogsController_getStatus']
  }
  '/v0/projects/{ref}/analytics/endpoints/functions.resource-usage': {
    /** Gets a project's function resource usage */
    get: operations['FunctionResourceLogsController_getStatus']
  }
  '/v0/projects/{ref}/analytics/endpoints/logs.all': {
    /** Gets project's logs */
    get: operations['LogsController_getApiPaths']
  }
  '/v0/projects/{ref}/analytics/endpoints/usage.api-counts': {
    /** Gets project's usage api counts */
    get: operations['UsageApiController_getApiCounts']
  }
  '/v0/projects/{ref}/analytics/endpoints/usage.api-requests-count': {
    /** Gets project's usage api requests count */
    get: operations['UsageApiController_getApiRequestsCount']
  }
  '/v0/projects/{ref}/config/pgbouncer': {
    /** Gets project's pgbouncer config */
    get: operations['PgbouncerConfigController_getPgbouncerConfig']
    /** Updates project's pgbouncer config */
    patch: operations['PgbouncerConfigController_updatePgbouncerConfig']
  }
  '/v0/projects/{ref}/config/postgrest': {
    /** Gets project's postgrest config */
    get: operations['PostgrestConfigController_getPostgRESTConfig']
    /** Updates project's postgrest config */
    patch: operations['PostgrestConfigController_updatePostgRESTConfig']
  }
  '/v0/projects/{ref}/config/postgres': {
    /** Gets project's Postgres config */
    get: operations['PostgresConfigController_getConfig']
    /** Updates project's Postgres config */
    put: operations['PostgresConfigController_updateConfig']
  }
  '/v0/projects/{ref}/config/secrets': {
    /** Updates project's secrets config */
    patch: operations['SecretsConfigController_updateConfig']
  }
  '/v0/projects/{ref}/config/storage': {
    /** Gets project's storage config */
    get: operations['StorageConfigController_getConfig']
    /** Updates project's storage config */
    patch: operations['StorageConfigController_updateConfig']
  }
  '/v0/projects/{ref}/billing/addons': {
    /** Gets project addons */
    get: operations['ProjectAddonController_getProjectAddons']
    /** Updates project addon */
    post: operations['ProjectAddonController_updateAddon']
  }
  '/v0/projects/{ref}/billing/addons/{addon_variant}': {
    /** Removes project addon */
    delete: operations['ProjectAddonController_removeAddon']
  }
  '/v0/storage/{ref}/buckets/{id}': {
    /** Gets bucket */
    get: operations['StorageBucketIdController_getBucket']
    /** Deletes bucket */
    delete: operations['StorageBucketIdController_deleteBucket']
    /** Updates bucket */
    patch: operations['StorageBucketIdController_updateBucket']
  }
  '/v0/storage/{ref}/buckets/{id}/empty': {
    /** Removes all objects inside a single bucket. */
    post: operations['StorageBucketIdController_emptyBucket']
  }
  '/v0/storage/{ref}/buckets': {
    /** Gets list of buckets */
    get: operations['StorageBucketsController_getBuckets']
    /** Create bucket */
    post: operations['StorageBucketsController_createBucket']
  }
  '/v0/storage/{ref}/buckets/{id}/objects/list': {
    /** Gets list of objects with the given bucket */
    post: operations['StorageObjectsController_getObjects']
  }
  '/v0/storage/{ref}/buckets/{id}/objects/public-url': {
    /** Creates URL for an asset in a public bucket */
    post: operations['StorageObjectsController_createPublicUrl']
  }
  '/v0/storage/{ref}/buckets/{id}/objects/download': {
    /** Downloads a file from a private bucket */
    post: operations['StorageObjectsController_download']
  }
  '/v0/storage/{ref}/buckets/{id}/objects/sign': {
    /** Creates a signed URL */
    post: operations['StorageObjectsController_createSignedUrl']
  }
  '/v0/storage/{ref}/buckets/{id}/objects/sign-multi': {
    /** Gets multiple signed URLs */
    post: operations['StorageObjectsController_createSignedUrls']
  }
  '/v0/storage/{ref}/buckets/{id}/objects/copy': {
    /** Copys object */
    post: operations['StorageObjectsController_copyObject']
  }
  '/v0/storage/{ref}/buckets/{id}/objects/move': {
    /** Move object */
    post: operations['StorageObjectsController_moveObject']
  }
  '/v0/storage/{ref}/buckets/{id}/objects': {
    /** Deletes objects */
    delete: operations['StorageObjectsController_deleteObjects']
  }
  '/v1/branches/{branch_id}': {
    /**
     * Get database branch config
     * @description Fetches configurations of the specified database branch
     */
    get: operations['BranchController_getBranchDetails']
    /**
     * Delete a database branch
     * @description Deletes the specified database branch
     */
    delete: operations['BranchController_deleteBranch']
    /**
     * Update database branch config
     * @description Updates the configuration of the specified database branch
     */
    patch: operations['BranchController_updateBranch']
  }
  '/v1/projects': {
    /**
     * List all projects
     * @description Returns a list of all projects you've previously created.
     */
    get: operations['ProjectsController_getProjects']
    /** Create a project */
    post: operations['ProjectsController_createProject']
  }
  '/v1/projects/{ref}/api-keys': {
    get: operations['ApiKeysController_getProjectApiKeys']
  }
  '/v1/projects/{ref}/branches': {
    /**
     * List all database branches
     * @description Returns all database branches of the specified project.
     */
    get: operations['BranchesController_getBranches']
    /**
     * Create a database branch
     * @description Creates a database branch from the specified project.
     */
    post: operations['BranchesController_createBranch']
    /**
     * Disables preview branching
     * @description Disables preview branching for the specified project
     */
    delete: operations['BranchesController_disableBranch']
  }
  '/v1/projects/{ref}/custom-hostname': {
    /** Gets project's custom hostname config */
    get: operations['CustomHostnamesController_getCustomHostnameConfig']
    /** Deletes a project's custom hostname configuration */
    delete: operations['CustomHostnamesController_removeCustomHostnameConfig']
  }
  '/v1/projects/{ref}/custom-hostname/initialize': {
    /** Updates project's custom hostname configuration */
    post: operations['CustomHostnamesController_createCustomHostnameConfig']
  }
  '/v1/projects/{ref}/custom-hostname/reverify': {
    /** Attempts to verify the DNS configuration for project's custom hostname configuration */
    post: operations['CustomHostnamesController_reverify']
  }
  '/v1/projects/{ref}/custom-hostname/activate': {
    /** Activates a custom hostname for a project. */
    post: operations['CustomHostnamesController_activate']
  }
  '/v1/projects/{ref}/network-bans/retrieve': {
    /** Gets project's network bans */
    post: operations['NetworkBansController_getNetworkBans']
  }
  '/v1/projects/{ref}/network-bans': {
    /** Remove network bans. */
    delete: operations['NetworkBansController_removeNetworkBan']
  }
  '/v1/projects/{ref}/network-restrictions': {
    /** Gets project's network restrictions */
    get: operations['NetworkRestrictionsController_getNetworkRestrictions']
  }
  '/v1/projects/{ref}/network-restrictions/apply': {
    /** Updates project's network restrictions */
    post: operations['NetworkRestrictionsController_applyNetworkRestrictions']
  }
  '/v1/projects/{ref}/pgsodium': {
    /** Gets project's pgsodium config */
    get: operations['PgsodiumConfigController_getPgsodiumConfig']
    /** Updates project's pgsodium config. Updating the root_key can cause all data encrypted with the older key to become inaccessible. */
    put: operations['PgsodiumConfigController_updatePgsodiumConfig']
  }
  '/v1/projects/{ref}/postgrest': {
    /** Gets project's postgrest config */
    get: operations['PostgrestConfigController_getPostgRESTConfig']
    /** Updates project's postgrest config */
    patch: operations['PostgrestConfigController_updatePostgRESTConfig']
  }
  '/v1/projects/{ref}': {
    /** Deletes the given project */
    delete: operations['ProjectsRefController_deleteProject']
  }
  '/v1/projects/{ref}/secrets': {
    /**
     * List all secrets
     * @description Returns all secrets you've previously added to the specified project.
     */
    get: operations['SecretsController_getSecrets']
    /**
     * Bulk create secrets
     * @description Creates multiple secrets and adds them to the specified project.
     */
    post: operations['SecretsController_createSecrets']
    /**
     * Bulk delete secrets
     * @description Deletes all secrets with the given names from the specified project
     */
    delete: operations['SecretsController_deleteSecrets']
  }
  '/v1/projects/{ref}/ssl-enforcement': {
    /** Get project's SSL enforcement configuration. */
    get: operations['SslEnforcementController_getSslEnforcementConfig']
    /** Update project's SSL enforcement configuration. */
    put: operations['SslEnforcementController_updateSslEnforcementConfig']
  }
  '/v1/projects/{ref}/types/typescript': {
    /**
     * Generate TypeScript types
     * @description Returns the TypeScript types of your schema for use with supabase-js.
     */
    get: operations['TypesController_getTypescriptTypes']
  }
  '/v1/projects/{ref}/vanity-subdomain': {
    /** Gets current vanity subdomain config */
    get: operations['VanitySubdomainsController_getVanitySubdomainConfig']
    /** Deletes a project's vanity subdomain configuration */
    delete: operations['VanitySubdomainsController_removeVanitySubdomainConfig']
  }
  '/v1/projects/{ref}/vanity-subdomain/check-availability': {
    /** Checks vanity subdomain availability */
    post: operations['VanitySubdomainsController_checkVanitySubdomainAvailability']
  }
  '/v1/projects/{ref}/vanity-subdomain/activate': {
    /** Activates a vanity subdomain for a project. */
    post: operations['VanitySubdomainsController_activateVanitySubdomainPlease']
  }
  '/v1/projects/{ref}/upgrade': {
    /** Upgrades the project's Postgres version */
    post: operations['UpgradeController_upgradeProject']
  }
  '/v1/projects/{ref}/upgrade/eligibility': {
    /** Returns the project's eligibility for upgrades */
    get: operations['UpgradeController_upgradeEligibilityInformation']
  }
  '/v1/projects/{ref}/upgrade/status': {
    /** Gets the latest status of the project's upgrade */
    get: operations['UpgradeController_getUpgradeStatus']
  }
  '/v1/projects/{ref}/readonly': {
    /** Returns project's readonly mode status */
    get: operations['ReadOnlyController_getReadOnlyModeStatus']
  }
  '/v1/projects/{ref}/readonly/temporary-disable': {
    /** Disables project's readonly mode for the next 15 minutes */
    post: operations['ReadOnlyController_temporarilyDisableReadonlyMode']
  }
  '/v1/projects/{ref}/health': {
    /** Gets project's service health status */
    get: operations['ServiceHealthController_checkServiceHealth']
  }
  '/v1/projects/{ref}/config/database/postgres': {
    /** Gets project's Postgres config */
    get: operations['AuthPostgresConfigController_getConfig']
    /** Updates project's Postgres config */
    put: operations['AuthPostgresConfigController_updateConfig']
  }
  '/v1/projects/{ref}/config/database/pgbouncer': {
    /** Get project's pgbouncer config */
    get: operations['V1PgbouncerConfigController_v1GetPgbouncerConfig']
  }
  '/v1/projects/{ref}/config/auth': {
    /** Gets project's auth config */
    get: operations['V1AuthConfigController_getV1AuthConfig']
    /** Updates a project's auth config */
    patch: operations['V1AuthConfigController_updateV1AuthConfig']
  }
  '/v1/projects/{ref}/config/auth/sso/providers': {
    /** Lists all SSO providers */
    get: operations['ProvidersController_listAllProviders']
    /** Creates a new SSO provider */
    post: operations['ProvidersController_createProviderForProject']
  }
  '/v1/projects/{ref}/config/auth/sso/providers/{provider_id}': {
    /** Gets a SSO provider by its UUID */
    get: operations['ProvidersController_getProviderById']
    /** Updates a SSO provider by its UUID */
    put: operations['ProvidersController_updateProviderById']
    /** Removes a SSO provider by its UUID */
    delete: operations['ProvidersController_removeProviderById']
  }
  '/v1/projects/{ref}/database/query': {
    /** Run sql query */
    post: operations['V1QueryController_v1RunQuery']
  }
  '/v1/projects/{ref}/database/webhooks/enable': {
    /** Enables Database Webhooks on the project */
    post: operations['V1DatabaseWebhooksController_v1EnableDatabaseWebhooks']
  }
  '/v1/projects/{ref}/database/backups/restore-pitr': {
    /** Restores a PITR backup for a database */
    post: operations['V1RestorePitrController_v1RestorePitr']
  }
  '/v1/projects/{ref}/functions': {
    /**
     * List all functions
     * @description Returns all functions you've previously added to the specified project.
     */
    get: operations['FunctionsController_getFunctions']
    /**
     * Create a function
     * @description Creates a function and adds it to the specified project.
     */
    post: operations['FunctionsController_createFunction']
  }
  '/v1/projects/{ref}/functions/{function_slug}': {
    /**
     * Retrieve a function
     * @description Retrieves a function with the specified slug and project.
     */
    get: operations['FunctionSlugController_getFunction']
    /**
     * Delete a function
     * @description Deletes a function with the specified slug from the specified project.
     */
    delete: operations['FunctionSlugController_deleteFunction']
    /**
     * Update a function
     * @description Updates a function with the specified slug and project.
     */
    patch: operations['FunctionSlugController_updateFunction']
  }
  '/v1/projects/{ref}/functions/{function_slug}/body': {
    /**
     * Retrieve a function body
     * @description Retrieves a function body for the specified slug and project.
     */
    get: operations['FunctionSlugController_getFunctionBody']
  }
  '/v1/organizations': {
    /**
     * List all organizations
     * @description Returns a list of organizations that you currently belong to.
     */
    get: operations['OrganizationsController_getOrganizations']
    /** Create an organization */
    post: operations['OrganizationsController_createOrganization']
  }
  '/v1/organizations/{slug}/members': {
    /** List members of an organization */
    get: operations['V1OrganizationMembersController_v1ListOrganizationMembers']
  }
  '/v1/oauth/authorize': {
    /** Authorize user through oauth */
    get: operations['OAuthController_authorize']
  }
  '/v1/oauth/token': {
    /** Exchange auth code for user's access and refresh token */
    post: operations['OAuthController_token']
  }
  '/v1/snippets': {
    /** Lists SQL snippets for the logged in user */
    get: operations['SnippetsController_listSnippets']
  }
  '/v1/snippets/{id}': {
    /** Gets a specific SQL snippet */
    get: operations['SnippetsController_getSnippet']
  }
  '/partners/flyio/callback': {
    /** Redirects to Supabase dashboard after completing Fly sso */
    get: operations['CallbackController_redirectToDashboardFlyioExtensionScreen']
  }
  '/partners/flyio/extensions/{extension_id}': {
    /** Gets database status */
    get: operations['ExtensionController_getResourceStatus']
    /** Deletes a database */
    delete: operations['ExtensionController_deleteResource']
  }
  '/partners/flyio/extensions/{extension_id}/sso': {
    /** Starts Fly single sign on */
    get: operations['ExtensionController_startFlyioSSO']
  }
  '/partners/flyio/extensions/{extension_id}/billing': {
    /** Gets resource billing */
    get: operations['ExtensionController_getResourceBilling']
  }
  '/partners/flyio/extensions': {
    /** Creates a database */
    post: operations['ExtensionsController_provisionResource']
  }
  '/partners/flyio/organizations/{organization_id}/extensions': {
    /** Gets all databases that belong to the Fly organization */
    get: operations['OrganizationsController_getOrgExtensions']
  }
  '/partners/flyio/organizations/{organization_id}/sso': {
    /** Starts Fly single sign on */
    get: operations['OrganizationsController_startFlyioSSO']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    UpdateNotificationsBodyV1: Record<string, never>
    ResetPasswordBody: Record<string, never>
    SendFeedbackBody: Record<string, never>
    SendExitSurveyBody: Record<string, never>
    SignUpBody: Record<string, never>
    UpdateGoTrueConfigBody: Record<string, never>
    UserBody: Record<string, never>
    DownloadBackupBody: Record<string, never>
    RestoreLogicalBackupBody: Record<string, never>
    RestorePhysicalBackupBody: Record<string, never>
    PointInTimeRestoreBody: Record<string, never>
    CreateOrganizationBody: Record<string, never>
    UpdateOrganizationBody: Record<string, never>
    CreateTaxIdBody: Record<string, never>
    DeleteTaxIdBody: Record<string, never>
    TransferOrganizationBody: Record<string, never>
    InviteUserBody: Record<string, never>
    RemoveMemberBody: Record<string, never>
    UpdateMemberBody: Record<string, never>
    DetachPaymentMethodBody: Record<string, never>
    UpdateSubscriptionBody: Record<string, never>
    GrantColumnPrivilegesBody: Record<string, never>
    RevokeColumnPrivilegesBody: Record<string, never>
    CreateColumnBody: Record<string, never>
    UpdateColumnBody: Record<string, never>
    CreateExtensionBody: Record<string, never>
    CreateFunctionBody: {
      slug: string
      name: string
      body: string
      verify_jwt?: boolean
    }
    UpdateFunctionBody: {
      name?: string
      body?: string
      verify_jwt?: boolean
    }
    CreatePolicyBody: Record<string, never>
    UpdatePolicyBody: Record<string, never>
    CreatePublicationBody: Record<string, never>
    UpdatePublicationBody: Record<string, never>
    RunQueryBody: Record<string, never>
    FormatQueryBody: Record<string, never>
    ValidateQueryBody: Record<string, never>
    CreateRoleBody: Record<string, never>
    UpdateRoleBody: Record<string, never>
    CreateSchemaBody: Record<string, never>
    UpdateSchemaBody: Record<string, never>
    SearchTableBody: Record<string, never>
    SearchColumnBody: Record<string, never>
    GrantTablePrivilegesBody: Record<string, never>
    RevokeTablePrivilegesBody: Record<string, never>
    CreateTableBody: Record<string, never>
    UpdateTableBody: Record<string, never>
    CreateTriggerBody: Record<string, never>
    UpdateTriggerBody: Record<string, never>
    CreateAccessTokenBody: Record<string, never>
    SearchProfileBody: Record<string, never>
    PasswordCheckBody: Record<string, never>
    UpdateProfileBody: Record<string, never>
    CreateProjectBody: {
      /** @description Database password */
      db_pass: string
      /** @description Name of your project, should not contain dots */
      name: string
      /** @description Slug of your organization */
      organization_id: string
      /**
       * @deprecated
       * @description Subscription plan is now set on organization level and is ignored in this request
       * @example free
       * @enum {string}
       */
      plan: 'free' | 'pro'
      /**
       * @description Region you want your server to reside in
       * @example us-east-1
       * @enum {string}
       */
      region:
        | 'us-east-1'
        | 'us-west-1'
        | 'us-west-2'
        | 'ap-southeast-1'
        | 'ap-northeast-1'
        | 'ap-northeast-2'
        | 'ap-southeast-2'
        | 'eu-west-1'
        | 'eu-west-2'
        | 'eu-west-3'
        | 'eu-central-1'
        | 'ca-central-1'
        | 'ap-south-1'
        | 'sa-east-1'
      /** @deprecated */
      kps_enabled: boolean
    }
    CreateContentParams: Record<string, never>
    UpsertContentParams: Record<string, never>
    UpdateContentParams: Record<string, never>
    UpdatePasswordBody: Record<string, never>
    Buffer: Record<string, never>
    ResizeBody: Record<string, never>
    UpdateProjectBody: Record<string, never>
    RestartServicesBody: Record<string, never>
    ProjectSettingsResponse: Record<string, never>
    TransferProjectBody: Record<string, never>
    UpdatePgbouncerConfigBody: {
      default_pool_size: number
      max_client_conn: number
    }
    UpdatePostgrestConfigBody: {
      max_rows: number
    }
    UpdatePostgresConfigBody: {
      statement_timeout: string
      effective_cache_size: string
      maintenance_work_mem: string
      max_connections: number
      max_parallel_maintenance_workers: number
      max_parallel_workers: number
      max_parallel_workers_per_gather: number
      max_worker_processes: number
      shared_buffers: string
      work_mem: string
    }
    UpdateSecretsConfigBody: Record<string, never>
    UpdateStorageConfigBody: Record<string, never>
    UpdateAddonBody: Record<string, never>
    ApiResponse: Record<string, never>
    SettingsResponse: Record<string, never>
    UpdateStorageBucketBody: Record<string, never>
    CreateStorageBucketBody: Record<string, never>
    GetObjectsBody: Record<string, never>
    GetPublicUrlBody: Record<string, never>
    DownloadObjectBody: Record<string, never>
    GetSignedUrlBody: Record<string, never>
    GetSignedUrlsBody: Record<string, never>
    CopyObjectBody: Record<string, never>
    MoveObjectBody: Record<string, never>
    DeleteObjectsBody: Record<string, never>
    TelemetryEventBody: Record<string, never>
    TelemetryIdentifyBody: Record<string, never>
    TelemetryPageBody: Record<string, never>
    TelemetryActivityBody: Record<string, never>
    TelemetryPageviewBody: Record<string, never>
    CreateVercelEnvironmentVariableBody: Record<string, never>
    CreateVercelIntegrationBody: Record<string, never>
    CreateVercelConnectionsBody: Record<string, never>
    UpdateVercelConnectionsBody: Record<string, never>
    CreateGitHubIntegrationBody: Record<string, never>
    CreateGitHubConnectionsBody: Record<string, never>
    UpdateGitHubConnectionsBody: Record<string, never>
    CreateCliLoginSessionBody: Record<string, never>
    CreateSecretBody: {
      /**
       * @description Secret name must not start with the SUPABASE_ prefix.
       * @example string
       */
      name: string
    }
    ReportStatusBody: Record<string, never>
    EventBody: Record<string, never>
    CredentialsRequestBody: Record<string, never>
    UpdateAddonAdminBody: Record<string, never>
    DatabaseResponse: {
      /** @description Database host */
      host: string
      /** @description Database version */
      version: string
    }
    ProjectResponse: {
      /** @description Id of your project */
      id: string
      /** @description Slug of your organization */
      organization_id: string
      /** @description Name of your project */
      name: string
      /**
       * @description Region of your project
       * @example us-east-1
       */
      region: string
      /**
       * @description Creation timestamp
       * @example 2023-03-29T16:32:59Z
       */
      created_at: string
      database?: components['schemas']['DatabaseResponse']
    }
    UpdateSubscriptionV2AdminBody: Record<string, never>
    GetMetricsBody: Record<string, never>
    UpdateBranchBody: Record<string, never>
    CreateBranchBody: Record<string, never>
    UpdateCustomHostnameBody: Record<string, never>
    RemoveNetworkBanRequest: Record<string, never>
    NetworkRestrictionsRequest: Record<string, never>
    UpdatePgsodiumConfigBody: Record<string, never>
    SslEnforcementRequest: Record<string, never>
    VanitySubdomainBody: Record<string, never>
    UpgradeDatabaseBody: Record<string, never>
    AuthHealthResponse: Record<string, never>
    RealtimeHealthResponse: Record<string, never>
    ServiceHealthResponse: {
      info:
        | components['schemas']['AuthHealthResponse']
        | components['schemas']['RealtimeHealthResponse']
    }
    UpdateAuthConfigBody: Record<string, never>
    CreateProviderBody: {
      /**
       * @description What type of provider will be created
       * @enum {string}
       */
      type: 'saml'
    }
    UpdateProviderBody: Record<string, never>
    V1RestorePitrBody: Record<string, never>
    OAuthTokenBody: Record<string, never>
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /** Get notifications */
  NotificationsController_getNotificationsV2: {
    responses: {
      /** @description Failed to retrieve notifications */
      500: {
        content: never
      }
    }
  }
  /** Delete notifications */
  NotificationsController_deleteNotifications: {
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateNotificationsBodyV1']
      }
    }
    responses: {
      /** @description Failed to delete notifications */
      500: {
        content: never
      }
    }
  }
  /** Update notifications */
  NotificationsController_updateNotificationsV2: {
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description Failed to update notifications */
      500: {
        content: never
      }
    }
  }
  /** Reset password for email */
  ResetPasswordController_resetPassword: {
    requestBody: {
      content: {
        'application/json': components['schemas']['ResetPasswordBody']
      }
    }
    responses: {
      201: {
        content: never
      }
    }
  }
  /** Send feedback */
  SendFeedbackController_sendFeedback: {
    requestBody: {
      content: {
        'application/json': components['schemas']['SendFeedbackBody']
      }
    }
    responses: {
      /** @description Failed to send feedback */
      500: {
        content: never
      }
    }
  }
  /** Send exit survey to HubSpot */
  SendExitSurveyController_sendExitSurvey: {
    requestBody: {
      content: {
        'application/json': components['schemas']['SendExitSurveyBody']
      }
    }
    responses: {
      /** @description Failed to send exit survey */
      500: {
        content: never
      }
    }
  }
  /** Sign up with email and password */
  SignUpController_signUp: {
    requestBody: {
      content: {
        'application/json': components['schemas']['SignUpBody']
      }
    }
    responses: {
      201: {
        content: never
      }
    }
  }
  /** Gets project's status */
  StatusController_getStatus: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to get project's status */
      500: {
        content: never
      }
    }
  }
  /**
   * Gets resource warnings for all projects accessible by the user
   * @description Only returns the minimal project info
   */
  ProjectsResourceWarningsController_getProjectsResourceWarnings: {
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Redirects to Fly sso flow */
  TermsOfServiceController_flyTosAccepted: {
    parameters: {
      query: {
        extension_id: string
        organization_id: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Gets GoTrue config */
  GoTrueConfigController_getGoTrueConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to retrieve GoTrue config */
      500: {
        content: never
      }
    }
  }
  /** Updates GoTrue config */
  GoTrueConfigController_updateGoTrueConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateGoTrueConfigBody']
      }
    }
    responses: {
      /** @description Failed to update GoTrue config */
      500: {
        content: never
      }
    }
  }
  /** Sends an invite to the given email */
  InviteController_sendInvite: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to send an invite to the given email */
      500: {
        content: never
      }
    }
  }
  /** Sends a magic link to the given email */
  MagicLinkController_sendMagicLink: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to send a magic link to the given email */
      500: {
        content: never
      }
    }
  }
  /** Sends an OTP to the given phone number */
  OtpController_sendOtp: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to send an OTP to the given phone number */
      500: {
        content: never
      }
    }
  }
  /** Sends a recovery email to the given email */
  RecoverController_sendRecover: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to send a recovery email to the given email */
      500: {
        content: never
      }
    }
  }
  /** Gets GoTrue template */
  TemplateController_getTemplate: {
    responses: {
      /** @description Failed to retrieve GoTrue template */
      500: {
        content: never
      }
    }
  }
  /** Gets users */
  UsersController_getUsers: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve users */
      500: {
        content: never
      }
    }
  }
  /** Delete user with given ID */
  UsersController_deleteUser: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete user */
      500: {
        content: never
      }
    }
  }
  /** Delete all factors associated to a user */
  FactorsController_deleteFactors: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete factors */
      500: {
        content: never
      }
    }
  }
  /** Gets project backups */
  BackupsController_getBackups: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to get project backups */
      500: {
        content: never
      }
    }
  }
  /** Download project backup */
  BackupsController_downloadBackup: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DownloadBackupBody']
      }
    }
    responses: {
      /** @description Failed to download project backup */
      500: {
        content: never
      }
    }
  }
  /** Restore project backup */
  BackupsController_restoreBackup: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RestoreLogicalBackupBody']
      }
    }
    responses: {
      /** @description Failed to restore project backup */
      500: {
        content: never
      }
    }
  }
  /** Restore project with a physical backup */
  BackupsController_restorePhysicalBackup: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RestorePhysicalBackupBody']
      }
    }
    responses: {
      /** @description Failed to restore project with physical backup */
      500: {
        content: never
      }
    }
  }
  /** Restore project to a previous point in time */
  BackupsController_restorePointInTimeBackup: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PointInTimeRestoreBody']
      }
    }
    responses: {
      /** @description Failed to restore project to a previous point in time */
      500: {
        content: never
      }
    }
  }
  /** Gets hook logs with the given ID */
  HooksController_getHookLogs: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get hook logs with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Enables Database Webhooks on the project */
  HooksController_enableHooks: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to enable Database Webhooks on the project */
      500: {
        content: never
      }
    }
  }
  /** Gets the status of owner reassignment */
  OwnerController_getOwnerReassignStatus: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to get status of owner reassignment */
      500: {
        content: never
      }
    }
  }
  /** Reassigns object owner from supabase_admin to temp */
  OwnerController_applyOwnerReassign: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to reassign owner on the project */
      500: {
        content: never
      }
    }
  }
  /** Rollback object owner from temp to supabase_admin */
  OwnerController_rollbackOwnerReassign: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to rollback owner on the project */
      500: {
        content: never
      }
    }
  }
  /** Reassigns object owner from temp to postgres */
  OwnerController_finaliseOwnerReassign: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to reassign owner on the project */
      500: {
        content: never
      }
    }
  }
  /**
   * List all organizations
   * @description Returns a list of organizations that you currently belong to.
   */
  OrganizationsController_getOrganizations: {
    responses: {
      /** @description Unexpected error listing organizations */
      500: {
        content: never
      }
    }
  }
  /** Creates an organization */
  OrganizationsController_createOrganizationWithTier: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateOrganizationBody']
      }
    }
    responses: {
      /** @description Unexpected error creating an organization */
      500: {
        content: never
      }
    }
  }
  /** Gets organization linked to fly organization id */
  OrganizationsController_getOrganizationByFlyOrganizationId: {
    parameters: {
      path: {
        fly_organization_id: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Deletes organization */
  OrganizationSlugController_deleteOrganization: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete organization */
      500: {
        content: never
      }
    }
  }
  /** Updates organization */
  OrganizationSlugController_updateOrganization: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateOrganizationBody']
      }
    }
    responses: {
      /** @description Failed to update organization */
      500: {
        content: never
      }
    }
  }
  /** Gets the Stripe customer */
  CustomerController_getCustomer: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to retrieve the Stripe customer */
      500: {
        content: never
      }
    }
  }
  /** Updates the Stripe customer */
  CustomerController_updateCustomer: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update the Stripe customer */
      500: {
        content: never
      }
    }
  }
  /** Gets the given organization's roles */
  RolesController_addMember: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to retrieve the organization's roles */
      500: {
        content: never
      }
    }
  }
  /** Gets the given organization's tax IDs */
  TaxIdsController_getTaxIds: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve the organization's tax IDs */
      500: {
        content: never
      }
    }
  }
  /** Creates a tax ID for the given organization */
  TaxIdsController_createTaxId: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTaxIdBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create the tax ID */
      500: {
        content: never
      }
    }
  }
  /** Delete the tax ID with the given ID */
  TaxIdsController_deleteTaxId: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteTaxIdBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete the tax ID */
      500: {
        content: never
      }
    }
  }
  /** Transfers the organization to the given member */
  TransferController_transferOrganization: {
    requestBody: {
      content: {
        'application/json': components['schemas']['TransferOrganizationBody']
      }
    }
    responses: {
      /** @description Failed to update owner */
      500: {
        content: never
      }
    }
  }
  /** Gets daily organization stats */
  OrgDailyStatsController_getDailyStats: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to get daily organization stats */
      500: {
        content: never
      }
    }
  }
  /** Gets usage stats */
  OrgUsageController_getDailyStats: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to get usage stats */
      500: {
        content: never
      }
    }
  }
  /** Get standard security questionnaire URL */
  OrgDocumentsController_getStandardSecurityQuestionnaireUrl: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Get SOC2 Type 2 report URL */
  OrgDocumentsController_getSoc2Type2ReportUrl: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Gets an organization's audit logs */
  OrgAuditLogsController_getAuditLogs: {
    parameters: {
      query?: {
        /** @description Start timestamp */
        iso_timestamp_start?: string
        /** @description End timestamp */
        iso_timestamp_end?: string
      }
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to get an organization's audit logs */
      500: {
        content: never
      }
    }
  }
  /** Gets invited users */
  InviteController_getInvitedUsers: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to get invited users */
      500: {
        content: never
      }
    }
  }
  /** Invites user */
  InviteController_inviteUser: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['InviteUserBody']
      }
    }
    responses: {
      /** @description Failed to invite user */
      500: {
        content: never
      }
    }
  }
  /** Delete invited user */
  InviteController_deleteInvitedUser: {
    parameters: {
      query: {
        invited_id: number
      }
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to delete invited user */
      500: {
        content: never
      }
    }
  }
  /** Gets invite */
  JoinController_getInvite: {
    parameters: {
      query: {
        token: string
      }
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to get invite */
      500: {
        content: never
      }
    }
  }
  /** Joins organization */
  JoinController_joinOrganization: {
    parameters: {
      query: {
        token: string
      }
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to join organization */
      500: {
        content: never
      }
    }
  }
  /** Leaves the given organization */
  MembersDeprecatedController_leaveOrganization: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to leave organization */
      500: {
        content: never
      }
    }
  }
  /** Leaves the given organization */
  MembersDeprecatedController_removeMember: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RemoveMemberBody']
      }
    }
    responses: {
      /** @description Failed to leave organization */
      500: {
        content: never
      }
    }
  }
  /** Gets organization's members */
  MembersController_getMembers: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to retrieve organization's members */
      500: {
        content: never
      }
    }
  }
  /** Removes organization member */
  MembersController_deleteMember: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to remove organization member */
      500: {
        content: never
      }
    }
  }
  /** Updates organization member */
  MembersController_updateMember: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateMemberBody']
      }
    }
    responses: {
      /** @description Failed to update organization member */
      500: {
        content: never
      }
    }
  }
  /** Gets organization members who have reached their free project limit */
  ReachedFreeProjectLimitController_getMembersWhoReachedFreeProjectLimit: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to retrieve organization members who have reached their free project limit */
      500: {
        content: never
      }
    }
  }
  /** Gets Stripe payment methods for the given organization */
  PaymentsController_getPaymentMethods: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get Stripe payment methods */
      500: {
        content: never
      }
    }
  }
  /** Detach Stripe payment method with the given card ID */
  PaymentsController_detachPaymentMethod: {
    requestBody: {
      content: {
        'application/json': components['schemas']['DetachPaymentMethodBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to detach Stripe payment method */
      500: {
        content: never
      }
    }
  }
  /** Sets up a payment method */
  SetupIntentController_setUpPaymentMethod: {
    responses: {
      /** @description Failed to set up a payment method */
      500: {
        content: never
      }
    }
  }
  /** Gets the current subscription */
  SubscriptionController_getSubscription: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve subscription */
      500: {
        content: never
      }
    }
  }
  /** Updates subscription */
  SubscriptionController_updateSubscription: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSubscriptionBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update subscription change */
      500: {
        content: never
      }
    }
  }
  /** Preview subscription changes */
  SubscriptionController_previewSubscriptionChange: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSubscriptionBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to preview subscription changes */
      500: {
        content: never
      }
    }
  }
  /** Deletes any upcoming subscription schedule */
  SubscriptionController_deleteSubscriptionSchedule: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update subscription change */
      500: {
        content: never
      }
    }
  }
  /** Gets subscription plans */
  OrgPlansController_getAvailablePlans: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get subscription plans */
      500: {
        content: never
      }
    }
  }
  /** Gets the upcoming invoice */
  OrgInvoicesController_getUpcomingInvoice: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve upcoming invoice */
      500: {
        content: never
      }
    }
  }
  /** Retrieve column privileges */
  ColumnPrivilegesController_getColumnPrivileges: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve column privileges */
      500: {
        content: never
      }
    }
  }
  /** Grant column privileges */
  ColumnPrivilegesController_grantColumnPrivileges: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GrantColumnPrivilegesBody'][]
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to grant column privileges */
      500: {
        content: never
      }
    }
  }
  /** Revoke column privileges */
  ColumnPrivilegesController_revokeColumnPrivileges: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RevokeColumnPrivilegesBody'][]
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to revoke column privileges */
      500: {
        content: never
      }
    }
  }
  /** Gets project pg.columns */
  ColumnsController_getColumns: {
    parameters: {
      query: {
        included_schemas: string
        excluded_schemas: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get pg.columns */
      500: {
        content: never
      }
    }
  }
  /** Creates project pg.column */
  ColumnsController_createColumn: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateColumnBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create pg.column */
      500: {
        content: never
      }
    }
  }
  /** Deletes project pg.column with the given ID */
  ColumnsController_deleteColumn: {
    parameters: {
      query: {
        /** @description Column ID */
        id: unknown
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete pg.column with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Updates project pg.column with the given ID */
  ColumnsController_updateColumn: {
    parameters: {
      query: {
        /** @description Column ID */
        id: unknown
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateColumnBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update pg.column with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Gets project pg.extensions */
  ExtensionsController_getExtensions: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get pg.extensions */
      500: {
        content: never
      }
    }
  }
  /** Creates project pg.extension */
  ExtensionsController_createExtension: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateExtensionBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create pg.extension */
      500: {
        content: never
      }
    }
  }
  /** Deletes project pg.extension with the given ID */
  ExtensionsController_deleteExtension: {
    parameters: {
      query: {
        /** @description Extension ID */
        id: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete pg.extension with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Retrieve database foreign tables */
  ForeignTablesController_getForeignTables: {
    parameters: {
      query: {
        id: string
        limit: string
        offset: string
        include_columns: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve database foreign tables */
      500: {
        content: never
      }
    }
  }
  /**
   * List all functions
   * @description Returns all functions you've previously added to the specified project.
   */
  FunctionsController_getFunctions: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project's functions */
      500: {
        content: never
      }
    }
  }
  /**
   * Create a function
   * @description Creates a function and adds it to the specified project.
   */
  FunctionsController_createFunction: {
    parameters: {
      query?: {
        import_map_path?: string
        entrypoint_path?: string
        import_map?: boolean
        verify_jwt?: boolean
        name?: string
        slug?: string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateFunctionBody']
        'application/vnd.denoland.eszip': components['schemas']['CreateFunctionBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create project's function */
      500: {
        content: never
      }
    }
  }
  /** Deletes project pg.function with the given ID */
  FunctionsController_deleteFunction: {
    parameters: {
      query: {
        /** @description Function ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete pg.function with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Updates project pg.function with the given ID */
  FunctionsController_updateFunction: {
    parameters: {
      query: {
        /** @description Function ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateFunctionBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update pg.function with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Retrieve database materialized views */
  MaterializedViewsController_getMaterializedViews: {
    parameters: {
      query: {
        id: string
        included_schemas: string
        excluded_schemas: string
        limit: string
        offset: string
        include_columns: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve database materialized views */
      500: {
        content: never
      }
    }
  }
  /** Gets project pg.policies */
  PoliciesController_getPolicies: {
    parameters: {
      query: {
        included_schemas: string
        excluded_schemas: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get pg.policies */
      500: {
        content: never
      }
    }
  }
  /** Creates project pg.policy */
  PoliciesController_createPolicy: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePolicyBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create pg.policy */
      500: {
        content: never
      }
    }
  }
  /** Deletes project pg.policy with the given ID */
  PoliciesController_deletePolicy: {
    parameters: {
      query: {
        /** @description Policy ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete pg.policy with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Updates project pg.policy with the given ID */
  PoliciesController_updatePolicy: {
    parameters: {
      query: {
        /** @description Policy ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePolicyBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update pg.policy with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Gets project pg.publications */
  PublicationsController_getPublications: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get pg.publications */
      500: {
        content: never
      }
    }
  }
  /** Gets project pg.publications */
  PublicationsController_createPublication: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePublicationBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create pg.publication */
      500: {
        content: never
      }
    }
  }
  /** Deletes project pg.publication with the given ID */
  PublicationsController_deletePublication: {
    parameters: {
      query: {
        /** @description Publication ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete pg.publication with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Updates project pg.publication with the given ID */
  PublicationsController_updatePublication: {
    parameters: {
      query: {
        /** @description Publication ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePublicationBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update pg.publication with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Run sql query */
  QueryController_runQuery: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RunQueryBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to run sql query */
      500: {
        content: never
      }
    }
  }
  /** Format sql query */
  QueryController_formatQuery: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['FormatQueryBody']
      }
    }
    responses: {
      /** @description Failed to format sql query */
      500: {
        content: never
      }
    }
  }
  /** Validate sql query */
  QueryController_validateQuery: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ValidateQueryBody']
      }
    }
    responses: {
      /** @description Failed to validate sql query */
      500: {
        content: never
      }
    }
  }
  /** Gets project pg.roles */
  RolesController_getRoles: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get pg.roles */
      500: {
        content: never
      }
    }
  }
  /** Creates project pg.role */
  RolesController_createRole: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateRoleBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create pg.role */
      500: {
        content: never
      }
    }
  }
  /** Deletes project pg.role with the given ID */
  RolesController_deleteRole: {
    parameters: {
      query: {
        /** @description Role ID */
        id: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete pg.role with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Updates project pg.role with the given ID */
  RolesController_updateRole: {
    parameters: {
      query: {
        /** @description Role ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateRoleBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update pg.role with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Gets project pg.schemas */
  SchemasController_getSchemas: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get pg.schemas */
      500: {
        content: never
      }
    }
  }
  /** Creates project pg.schema */
  SchemasController_createSchema: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSchemaBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create pg.schema */
      500: {
        content: never
      }
    }
  }
  /** Deletes project pg.schema with the given ID */
  SchemasController_deleteSchema: {
    parameters: {
      query: {
        /** @description Schema ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete pg.schema with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Updates project pg.schema with the given ID */
  SchemasController_updateSchema: {
    parameters: {
      query: {
        /** @description Schema ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSchemaBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update pg.schema with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Searches project pg.tables. Return maximum 50 results. */
  SearchController_searchTables: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SearchTableBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to search pg.tables */
      500: {
        content: never
      }
    }
  }
  /** Searches project pg.columns. Return maximum 50 results. */
  SearchController_searchColumns: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SearchColumnBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to search pg.columns */
      500: {
        content: never
      }
    }
  }
  /** Retrieve table privileges */
  TablePrivilegesController_getTablePrivileges: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve table privileges */
      500: {
        content: never
      }
    }
  }
  /** Grant table privileges */
  TablePrivilegesController_grantTablePrivileges: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GrantTablePrivilegesBody'][]
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to grant table privileges */
      500: {
        content: never
      }
    }
  }
  /** Revoke table privileges */
  TablePrivilegesController_revokeTablePrivileges: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RevokeTablePrivilegesBody'][]
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to revoke table privileges */
      500: {
        content: never
      }
    }
  }
  /** Gets project pg.tables or pg.table with the given ID */
  TablesController_getTables: {
    parameters: {
      query: {
        /** @description Table ID */
        id?: string
        include_system_schemas: string
        included_schemas: string
        excluded_schemas: string
        limit: string
        offset: string
        include_columns: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get pg.tables or pg.table with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Creates project pg.table */
  TablesController_createTable: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTableBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create pg.table */
      500: {
        content: never
      }
    }
  }
  /** Deletes project pg.table with the given ID */
  TablesController_deleteTable: {
    parameters: {
      query: {
        /** @description Table ID */
        id: number
        cascade: boolean
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete pg.table with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Updates project pg.table with the given ID */
  TablesController_updateTable: {
    parameters: {
      query: {
        /** @description Table ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateTableBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update pg.table with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Gets project pg.triggers */
  TriggersController_getTriggers: {
    parameters: {
      query: {
        included_schemas: string
        excluded_schemas: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get pg.triggers */
      500: {
        content: never
      }
    }
  }
  /** Creates project pg.trigger */
  TriggersController_createTrigger: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTriggerBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create pg.trigger */
      500: {
        content: never
      }
    }
  }
  /** Deletes project pg.trigger with the given ID */
  TriggersController_deleteTrigger: {
    parameters: {
      query: {
        /** @description Trigger ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete pg.trigger with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Updates project pg.trigger with the given ID */
  TriggersController_updateTrigger: {
    parameters: {
      query: {
        /** @description Trigger ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateTriggerBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update pg.trigger with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Gets project pg.types */
  TypesController_getTypes: {
    parameters: {
      query: {
        included_schemas: string
        excluded_schemas: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get pg.types */
      500: {
        content: never
      }
    }
  }
  /** Retrieve database views */
  ViewsController_getViews: {
    parameters: {
      query: {
        id: string
        include_system_schemas: string
        included_schemas: string
        excluded_schemas: string
        limit: string
        offset: string
        include_columns: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve database views */
      500: {
        content: never
      }
    }
  }
  /** Gets the user's access tokens */
  AccessTokensController_getAccessTokens: {
    responses: {
      /** @description Failed to get user's access tokens */
      500: {
        content: never
      }
    }
  }
  /** Creates a new access token */
  AccessTokensController_createAccessToken: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAccessTokenBody']
      }
    }
    responses: {
      /** @description Failed to create access token */
      500: {
        content: never
      }
    }
  }
  /** Gets the access token with the given ID */
  AccessTokensController_getAccessToken: {
    parameters: {
      path: {
        /** @description Access token ID */
        id: number
      }
    }
    responses: {
      /** @description Failed to get access token */
      500: {
        content: never
      }
    }
  }
  /** Deletes the access token with the given ID */
  AccessTokensController_deleteAccessToken: {
    parameters: {
      path: {
        /** @description Access token ID */
        id: number
      }
    }
    responses: {
      /** @description Failed to delete access token */
      500: {
        content: never
      }
    }
  }
  /** Gets a user's audit logs */
  UserAuditLogsController_getAuditLogs: {
    parameters: {
      query?: {
        /** @description Start timestamp */
        iso_timestamp_start?: string
        /** @description End timestamp */
        iso_timestamp_end?: string
      }
    }
    responses: {
      /** @description Failed to get a user's audit logs */
      500: {
        content: never
      }
    }
  }
  /** Search profiles by username, email with the given keywords */
  SearchProfileController_searchProfile: {
    requestBody: {
      content: {
        'application/json': components['schemas']['SearchProfileBody']
      }
    }
    responses: {
      /** @description Failed to search profiles with the given keywords */
      500: {
        content: never
      }
    }
  }
  /** Gets the user's subscription statistics */
  SubscriptionsController_getSubscriptionsStatistics: {
    responses: {
      /** @description Failed to retrieve user's subscription statistics */
      500: {
        content: never
      }
    }
  }
  /** Check password strength */
  PasswordCheckController_checkPassword: {
    requestBody: {
      content: {
        'application/json': components['schemas']['PasswordCheckBody']
      }
    }
    responses: {
      /** @description Failed to check password strength */
      500: {
        content: never
      }
    }
  }
  /** Gets all the user's permissions */
  PermissionsController_getPermissions: {
    responses: {
      /** @description Failed to retrieve permissions */
      500: {
        content: never
      }
    }
  }
  /** Gets the user's profile */
  ProfileController_getProfile: {
    responses: {
      /** @description Failed to retrieve user's profile */
      500: {
        content: never
      }
    }
  }
  /** Creates user's profile */
  ProfileController_createProfile: {
    responses: {
      /** @description Failed to create user's profile */
      500: {
        content: never
      }
    }
  }
  /** Deletes user's profile */
  ProfileController_deleteProfile: {
    responses: {
      /** @description Forbidden action */
      403: {
        content: never
      }
      /** @description Failed to delete user's profile */
      500: {
        content: never
      }
    }
  }
  /** Updates user's profile */
  ProfileController_updateProfile: {
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateProfileBody']
      }
    }
    responses: {
      /** @description Failed to update user's profile */
      500: {
        content: never
      }
    }
  }
  /**
   * List all projects
   * @description Returns a list of all projects you've previously created.
   */
  ProjectsController_getProjects: {
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Create a project */
  ProjectsController_createProject: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateProjectBody']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ProjectResponse']
        }
      }
    }
  }
  /** Gets project linked to fly extension id */
  ProjectsController_getProjectByFlyExtensionId: {
    parameters: {
      path: {
        fly_extension_id: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Gets project's content */
  ContentController_getContent: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to retrieve project's content */
      500: {
        content: never
      }
    }
  }
  /** Updates project's content */
  ContentController_updateWholeContent: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpsertContentParams']
      }
    }
    responses: {
      /** @description Failed to update project's content */
      500: {
        content: never
      }
    }
  }
  /** Creates project's content */
  ContentController_createContent: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateContentParams']
      }
    }
    responses: {
      /** @description Failed to create project's content */
      500: {
        content: never
      }
    }
  }
  /** Deletes project's content */
  ContentController_deleteContent: {
    responses: {
      /** @description Failed to delete project's content */
      500: {
        content: never
      }
    }
  }
  /** Updates project's content */
  ContentController_updateContent: {
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateContentParams']
      }
    }
    responses: {
      /** @description Failed to update project's content */
      500: {
        content: never
      }
    }
  }
  /** Gets daily project stats */
  DailyStatsController_getDailyStats: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to get daily project stats */
      500: {
        content: never
      }
    }
  }
  /** Updates the database password */
  DbPasswordController_updatePassword: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePasswordBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update database password */
      500: {
        content: never
      }
    }
  }
  /** Gets project health check */
  HealthCheckController_projectHealthCheck: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get project health check */
      500: {
        content: never
      }
    }
  }
  /** Gets project OpenApi */
  ApiController_projectOpenApi: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get project OpenApi */
      500: {
        content: never
      }
    }
  }
  /** Queries project Graphql */
  ApiController_projectGraphql: {
    parameters: {
      header: {
        'x-graphql-authorization': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Buffer']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to query project Graphql */
      500: {
        content: never
      }
    }
  }
  /** Gets project's usage metrics */
  InfraMonitoringController_getUsageMetrics: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to get project's usage metrics */
      500: {
        content: never
      }
    }
  }
  /** Gets project's invoices */
  InvoicesController_getInvoices: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to get project's invoices */
      500: {
        content: never
      }
    }
  }
  /** Gets project's invoice count */
  InvoicesController_getInvoiceCount: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to get project's invoice count */
      500: {
        content: never
      }
    }
  }
  /** Pauses the project */
  PauseController_pauseProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to pause the project */
      500: {
        content: never
      }
    }
  }
  /** Resize database disk */
  ResizeController_resizeDatabase: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ResizeBody']
      }
    }
    responses: {
      /** @description Failed to resize database disk */
      500: {
        content: never
      }
    }
  }
  /** Restarts project */
  RestartController_restartProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to restart project */
      500: {
        content: never
      }
    }
  }
  /** Gets a specific project that belongs to the authenticated user */
  ProjectsRefController_getProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Deletes the given project */
  ProjectsRefController_deleteProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
    }
  }
  /** Updates the given project */
  ProjectsRefController_updateProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateProjectBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project */
      500: {
        content: never
      }
    }
  }
  /** Restores project */
  RestoreController_restoreProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to restore project */
      500: {
        content: never
      }
    }
  }
  /** Restarts given services */
  RestartServicesController_restartServices: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RestartServicesBody']
      }
    }
    responses: {
      /** @description Failed to restart given services */
      500: {
        content: never
      }
    }
  }
  /** Gets project's settings */
  SettingsController_getProjectApi: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ProjectSettingsResponse']
        }
      }
      /** @description Failed to retrieve project's settings */
      500: {
        content: never
      }
    }
  }
  /**
   * Updates the project
   * @deprecated
   * @description Replaced by PATCH /platform/projects/:ref
   */
  UpdateController_updateProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateProjectBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project */
      500: {
        content: never
      }
    }
  }
  /** Previews transfering a project to a different organizations, shows eligibility and impact. */
  ProjectTransferController_previewTransfer: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TransferProjectBody']
      }
    }
    responses: {
      403: {
        content: never
      }
    }
  }
  /** Transfers a project to a different organization. */
  ProjectTransferController_transferProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TransferProjectBody']
      }
    }
    responses: {
      403: {
        content: never
      }
    }
  }
  /** Gets a project's function invocation statistics */
  FunctionInvocationLogsController_getStatus: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get project's function invocation statistics */
      500: {
        content: never
      }
    }
  }
  /** Gets a project's function request statistics */
  FunctionRequestLogsController_getStatus: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get project's function request statistics */
      500: {
        content: never
      }
    }
  }
  /** Gets a project's function resource usage */
  FunctionResourceLogsController_getStatus: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get project's function resource usage */
      500: {
        content: never
      }
    }
  }
  /** Gets project's logs */
  LogsController_getApiPaths: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get project's logs */
      500: {
        content: never
      }
    }
  }
  /** Gets project's usage api counts */
  UsageApiController_getApiCounts: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get project's usage api counts */
      500: {
        content: never
      }
    }
  }
  /** Gets project's usage api requests count */
  UsageApiController_getApiRequestsCount: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to get project's usage api requests count */
      500: {
        content: never
      }
    }
  }
  /** Gets project's pgbouncer config */
  PgbouncerConfigController_getPgbouncerConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to retrieve project's pgbouncer config */
      500: {
        content: never
      }
    }
  }
  /** Updates project's pgbouncer config */
  PgbouncerConfigController_updatePgbouncerConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePgbouncerConfigBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project's pgbouncer config */
      500: {
        content: never
      }
    }
  }
  /** Gets project's postgrest config */
  PostgrestConfigController_getPostgRESTConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project's postgrest config */
      500: {
        content: never
      }
    }
  }
  /** Updates project's postgrest config */
  PostgrestConfigController_updatePostgRESTConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePostgrestConfigBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project's postgrest config */
      500: {
        content: never
      }
    }
  }
  /** Gets project's Postgres config */
  PostgresConfigController_getConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to retrieve project's Postgres config */
      500: {
        content: never
      }
    }
  }
  /** Updates project's Postgres config */
  PostgresConfigController_updateConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePostgresConfigBody']
      }
    }
    responses: {
      /** @description Failed to update project's Postgres config */
      500: {
        content: never
      }
    }
  }
  /** Updates project's secrets config */
  SecretsConfigController_updateConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSecretsConfigBody']
      }
    }
    responses: {
      /** @description Failed to update project's secrets config */
      500: {
        content: never
      }
    }
  }
  /** Gets project's storage config */
  StorageConfigController_getConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project's storage config */
      500: {
        content: never
      }
    }
  }
  /** Updates project's storage config */
  StorageConfigController_updateConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateStorageConfigBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project's storage config */
      500: {
        content: never
      }
    }
  }
  /** Gets project addons */
  ProjectAddonController_getProjectAddons: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get project addons */
      500: {
        content: never
      }
    }
  }
  /** Updates project addon */
  ProjectAddonController_updateAddon: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAddonBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project addon */
      500: {
        content: never
      }
    }
  }
  /** Removes project addon */
  ProjectAddonController_removeAddon: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to remove project addon */
      500: {
        content: never
      }
    }
  }
  /**
   * Gets project's api info
   * @deprecated
   */
  ApiController_getProjectApi: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ApiResponse']
        }
      }
      /** @description Failed to retrieve project's api info */
      500: {
        content: never
      }
    }
  }
  /** Gets the last JWT secret update status */
  JwtSecretUpdateStatusController_getJwtSecretUpdateStatus: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to retrieve JWT secret update status */
      500: {
        content: never
      }
    }
  }
  /** Gets bucket */
  StorageBucketIdController_getBucket: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage bucket id */
        id: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get bucket */
      500: {
        content: never
      }
    }
  }
  /** Deletes bucket */
  StorageBucketIdController_deleteBucket: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage bucket id */
        id: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete bucket */
      500: {
        content: never
      }
    }
  }
  /** Updates bucket */
  StorageBucketIdController_updateBucket: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage bucket id */
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateStorageBucketBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update bucket */
      500: {
        content: never
      }
    }
  }
  /** Removes all objects inside a single bucket. */
  StorageBucketIdController_emptyBucket: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage bucket id */
        id: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to empty bucket */
      500: {
        content: never
      }
    }
  }
  /** Gets list of buckets */
  StorageBucketsController_getBuckets: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get list of buckets */
      500: {
        content: never
      }
    }
  }
  /** Create bucket */
  StorageBucketsController_createBucket: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateStorageBucketBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create bucket */
      500: {
        content: never
      }
    }
  }
  /** Gets list of objects with the given bucket */
  StorageObjectsController_getObjects: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage bucket id */
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GetObjectsBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get list of objects with the given bucket */
      500: {
        content: never
      }
    }
  }
  /** Creates URL for an asset in a public bucket */
  StorageObjectsController_createPublicUrl: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage bucket id */
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GetPublicUrlBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create public URL */
      500: {
        content: never
      }
    }
  }
  /** Downloads a file from a private bucket */
  StorageObjectsController_download: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage bucket id */
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DownloadObjectBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to download the file */
      500: {
        content: never
      }
    }
  }
  /** Creates a signed URL */
  StorageObjectsController_createSignedUrl: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage bucket id */
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GetSignedUrlBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create a signed URL */
      500: {
        content: never
      }
    }
  }
  /** Gets multiple signed URLs */
  StorageObjectsController_createSignedUrls: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage bucket id */
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GetSignedUrlsBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get multiple signed URLs */
      500: {
        content: never
      }
    }
  }
  /** Copys object */
  StorageObjectsController_copyObject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage bucket id */
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CopyObjectBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to copy object */
      500: {
        content: never
      }
    }
  }
  /** Move object */
  StorageObjectsController_moveObject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage bucket id */
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MoveObjectBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to move object */
      500: {
        content: never
      }
    }
  }
  /** Deletes objects */
  StorageObjectsController_deleteObjects: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage bucket id */
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteObjectsBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete objects */
      500: {
        content: never
      }
    }
  }
  /** Gets the total count of invoices for the given customer */
  InvoicesController_countInvoices: {
    responses: {
      200: {
        headers: {
          /** @description total count value */
          'X-Total-Count'?: unknown
        }
        content: never
      }
      /** @description Failed to retrieve the total count of invoices */
      500: {
        content: never
      }
    }
  }
  /** Gets information about overdue invoices that relate to the authenticated user */
  InvoicesController_getOverdueInvoices: {
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Gets invoice with the given invoice ID */
  InvoicesController_getInvoice: {
    parameters: {
      path: {
        id: string
      }
    }
    responses: {
      /** @description Failed to retrieve invoice */
      500: {
        content: never
      }
    }
  }
  /** Sends analytics server event */
  TelemetryEventController_sendServerEvent: {
    requestBody: {
      content: {
        'application/json': components['schemas']['TelemetryEventBody']
      }
    }
    responses: {
      /** @description Failed to send analytics server event */
      500: {
        content: never
      }
    }
  }
  /** Send analytics identify event */
  TelemetryIdentifyController_identify: {
    requestBody: {
      content: {
        'application/json': components['schemas']['TelemetryIdentifyBody']
      }
    }
    responses: {
      /** @description Failed to send analytics identify event */
      500: {
        content: never
      }
    }
  }
  /** Send server page event */
  TelemetryPageController_sendServerPage: {
    requestBody: {
      content: {
        'application/json': components['schemas']['TelemetryPageBody']
      }
    }
    responses: {
      /** @description Failed to send server page event */
      500: {
        content: never
      }
    }
  }
  /** Sends mixpanel server activity */
  TelemetryActivityController_sendServerActivity: {
    requestBody: {
      content: {
        'application/json': components['schemas']['TelemetryActivityBody']
      }
    }
    responses: {
      /** @description Failed to send mixpanel server activity */
      500: {
        content: never
      }
    }
  }
  /** Send mixpanel page event */
  TelemetryPageviewController_sendServerPageViewed: {
    requestBody: {
      content: {
        'application/json': components['schemas']['TelemetryPageviewBody']
      }
    }
    responses: {
      /** @description Failed to send mixpanel page event */
      500: {
        content: never
      }
    }
  }
  /** Gets the Vercel access token for the given code */
  VercelAccessTokenController_getAccessToken: {
    responses: {
      /** @description Failed to get Vercel access token */
      500: {
        content: never
      }
    }
  }
  /** Gets the project with the given ID if provided, otherwise gets the list of projects */
  VercelProjectsController_getVercelProjects: {
    parameters: {
      header: {
        vercel_authorization: string
      }
    }
    responses: {
      /** @description Failed to get project(s) */
      500: {
        content: never
      }
    }
  }
  /** Gets the environment variables for the given project ID on behalf of the given team ID */
  VercelEnvironmentVariablesController_getEnvironmentVariables: {
    parameters: {
      header: {
        vercel_authorization: string
      }
    }
    responses: {
      /** @description Failed to get Vercel environment variables */
      500: {
        content: never
      }
    }
  }
  /** Creates the environment variable for the given project ID on behalf of the given team ID */
  VercelEnvironmentVariablesController_createEnvironmentVariable: {
    parameters: {
      header: {
        vercel_authorization: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateVercelEnvironmentVariableBody']
      }
    }
    responses: {
      /** @description Failed to get the environment variables */
      500: {
        content: never
      }
    }
  }
  /** Gets user's integrations */
  IntegrationsController_getProjectConnections: {
    parameters: {
      query: {
        /** @description Filter results by integration name. Optional */
        integration_name: string
      }
    }
    responses: {
      /** @description Failed to get user's integrations */
      500: {
        content: never
      }
    }
  }
  /** Gets integration with the given organization slug */
  IntegrationsController_getProjectConnectionsForOrg: {
    parameters: {
      path: {
        slug: string
      }
    }
    responses: {
      /** @description Failed to get integration with the given organization slug */
      500: {
        content: never
      }
    }
  }
  /**
   * Create vercel integration
   * @description Exchanges a vercel code for an access token and saves the access token to the new integration record
   */
  VercelIntegrationController_createVercelIntegration: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateVercelIntegrationBody']
      }
    }
    responses: {
      /** @description Failed to create vercel integration */
      500: {
        content: never
      }
    }
  }
  /** Removes Vercel organization integration with the given id */
  VercelIntegrationController_removeVercelIntegration: {
    parameters: {
      path: {
        organization_integration_id: string
      }
    }
    responses: {
      /** @description Failed to remove Vercel organization integration with the given id */
      500: {
        content: never
      }
    }
  }
  /** Gets vercel projects with the given organization integration id */
  VercelProjectController_getVercelProjects: {
    parameters: {
      path: {
        organization_integration_id: string
      }
    }
    responses: {
      /** @description Failed to get vercel projects with the given organization integration id */
      500: {
        content: never
      }
    }
  }
  /** Gets installed vercel project connections for the given organization integration */
  VercelConnectionsController_getVercelConnections: {
    parameters: {
      path: {
        organization_integration_id: string
      }
    }
    responses: {
      /** @description Failed to get installed vercel connections for the given organization integration */
      500: {
        content: never
      }
    }
  }
  /** Connects a Vercel project to a supabase project */
  VercelConnectionsController_createVercelConnection: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateVercelConnectionsBody']
      }
    }
    responses: {
      /** @description Failed to create project connection */
      500: {
        content: never
      }
    }
  }
  /** Syncs supabase project envs with given connection id */
  VercelConnectionsController_syncVercelConnectionEnvs: {
    parameters: {
      path: {
        connection_id: string
      }
    }
    responses: {
      /** @description Failed to sync supabase project envs with given connection id */
      500: {
        content: never
      }
    }
  }
  /** Deletes vercel project connection */
  VercelConnectionsController_deleteVercelConnection: {
    parameters: {
      path: {
        connection_id: string
      }
    }
    responses: {
      /** @description Failed to delete vercel integration project connection */
      500: {
        content: never
      }
    }
  }
  /** Updates a Vercel connection for a supabase project */
  VercelConnectionsController_updateVercelConnection: {
    parameters: {
      path: {
        connection_id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateVercelConnectionsBody']
      }
    }
    responses: {
      /** @description Failed to update Vercel connection */
      500: {
        content: never
      }
    }
  }
  /** Create github integration */
  GitHubIntegrationController_createGitHubIntegration: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateGitHubIntegrationBody']
      }
    }
    responses: {
      /** @description Failed to create github integration */
      500: {
        content: never
      }
    }
  }
  /** Gets installed github project connections for the given organization integration */
  GitHubConnectionsController_getGitHubConnections: {
    parameters: {
      path: {
        organization_integration_id: string
      }
    }
    responses: {
      /** @description Failed to get installed github connections for the given organization integration */
      500: {
        content: never
      }
    }
  }
  /** Connects a GitHub project to a supabase project */
  GitHubConnectionsController_createGitHubConnection: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateGitHubConnectionsBody']
      }
    }
    responses: {
      /** @description Failed to create project connections */
      500: {
        content: never
      }
    }
  }
  /** Deletes github project connection */
  GitHubConnectionsController_deleteGitHubConnection: {
    parameters: {
      path: {
        connection_id: string
      }
    }
    responses: {
      /** @description Failed to delete github integration project connection */
      500: {
        content: never
      }
    }
  }
  /** Updates a GitHub connection for a supabase project */
  GitHubConnectionsController_updateGitHubConnection: {
    parameters: {
      path: {
        connection_id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateGitHubConnectionsBody']
      }
    }
    responses: {
      /** @description Failed to update GitHub connection */
      500: {
        content: never
      }
    }
  }
  /** Gets github repos for the given organization */
  GitHubRepoController_getRepos: {
    parameters: {
      path: {
        organization_integration_id: string
      }
    }
    responses: {
      /** @description Failed to get github repos for the given organization */
      500: {
        content: never
      }
    }
  }
  /** Gets github branches for a given repo */
  GitHubBranchController_getBranches: {
    parameters: {
      path: {
        organization_integration_id: string
        repo_owner: string
        repo_name: string
      }
    }
    responses: {
      /** @description Failed to get github branches for a given repo */
      500: {
        content: never
      }
    }
  }
  /** Gets a specific github branch for a given repo */
  GitHubBranchController_getBranchByName: {
    parameters: {
      path: {
        organization_integration_id: string
        repo_owner: string
        repo_name: string
        branch_name: string
      }
    }
    responses: {
      /** @description Failed to get github branch for a given repo */
      500: {
        content: never
      }
    }
  }
  /** Gets github pull requests for a given repo */
  GitHubPullRequestController_getPullRequestsByNumber: {
    parameters: {
      query: {
        pr_number: number[]
      }
      path: {
        organization_integration_id: string
        repo_owner: string
        repo_name: string
      }
    }
    responses: {
      /** @description Failed to get github pull requests for a given repo */
      500: {
        content: never
      }
    }
  }
  /** Gets github pull requests for a given repo */
  GitHubPullRequestController_getPullRequests: {
    parameters: {
      path: {
        organization_integration_id: string
        repo_owner: string
        repo_name: string
        target: string
      }
    }
    responses: {
      /** @description Failed to get github pull requests for a given repo */
      500: {
        content: never
      }
    }
  }
  /** Create CLI login session */
  CliLoginController_createCliLoginSession: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCliLoginSessionBody']
      }
    }
    responses: {
      /** @description Failed to create CLI login session */
      500: {
        content: never
      }
    }
  }
  /** Retrieve CLI login session */
  CliLoginController_getCliLoginSession: {
    responses: {
      /** @description Failed to retrieve CLI login session */
      500: {
        content: never
      }
    }
  }
  /** Gets GoTrue template */
  AuthTemplateController_getTemplate: {
    responses: {
      /** @description Failed to retrieve GoTrue template */
      500: {
        content: never
      }
    }
  }
  /** Gets the status of owner reassignment */
  DatabaseOwnerController_getOwnerReassignStatus: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to get status of owner reassignment */
      500: {
        content: never
      }
    }
  }
  /** Reassigns object owner from supabase_admin to temp */
  DatabaseOwnerController_applyOwnerReassign: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to reassign owner on the project */
      500: {
        content: never
      }
    }
  }
  /** Rollback object owner from temp to supabase_admin */
  DatabaseOwnerController_rollbackOwnerReassign: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to rollback owner on the project */
      500: {
        content: never
      }
    }
  }
  /** Reassigns object owner from temp to postgres */
  DatabaseOwnerController_finaliseOwnerReassign: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to reassign owner on the project */
      500: {
        content: never
      }
    }
  }
  /** Reset JWT if leaked keys found by GitHub secret scanning */
  GithubSecretAlertController_resetJwt: {
    parameters: {
      header: {
        'github-public-key-identifier': string
        'github-public-key-signature': string
      }
    }
    requestBody: {
      content: {
        'application/json': string
      }
    }
    responses: {
      /** @description Failed to reset JWT */
      500: {
        content: never
      }
    }
  }
  /**
   * List all functions
   * @description Returns all functions you've previously added to the specified project.
   */
  SystemFunctionsController_getFunctions: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project's functions */
      500: {
        content: never
      }
    }
  }
  /** Deletes all Edge Functions from a project */
  SystemFunctionsController_systemDeleteAllFunctions: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /**
   * List all secrets
   * @description Returns all secrets you've previously added to the specified project.
   */
  SystemSecretsController_getSecrets: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project's secrets */
      500: {
        content: never
      }
    }
  }
  /**
   * Bulk create secrets
   * @description Creates multiple secrets and adds them to the specified project.
   */
  SystemSecretsController_createSecrets: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSecretBody'][]
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create project's secrets */
      500: {
        content: never
      }
    }
  }
  /**
   * Bulk delete secrets
   * @description Deletes all secrets with the given names from the specified project
   */
  SystemSecretsController_deleteSecrets: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete secrets with given names */
      500: {
        content: never
      }
    }
  }
  /** Refreshes secrets */
  SecretsRefreshController_refreshSecrets: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to refresh secrets */
      500: {
        content: never
      }
    }
  }
  /** Updates a project's health status. */
  HealthReportingController_updateStatus: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReportStatusBody']
      }
    }
    responses: {
      /** @description Failed to update health status. */
      500: {
        content: never
      }
    }
  }
  /** Records an HA event */
  HaEventsController_updateStatus: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EventBody']
      }
    }
    responses: {
      /** @description Failed to record HA event. */
      500: {
        content: never
      }
    }
  }
  /** Allows a project to obtain temporary credentials. */
  AwsCredentialsController_getTemporaryCredentials: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CredentialsRequestBody']
      }
    }
    responses: {
      /** @description Failed to obtain temporary credentials. */
      500: {
        content: never
      }
    }
  }
  /** Updates project addon */
  AddonsController_updateAddon: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAddonAdminBody']
      }
    }
    responses: {
      /** @description Failed to update project addon */
      500: {
        content: never
      }
    }
  }
  /** Removes project addon */
  AddonsController_removeAddon: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to remove project addon */
      500: {
        content: never
      }
    }
  }
  /** Handle update project jwt on completion */
  ProjectUpdateJwtController_completeUpdateJwt: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      201: {
        content: never
      }
    }
  }
  /** Gets usage stats */
  OrgUsageSystemController_getDailyStats: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to get usage stats */
      500: {
        content: never
      }
    }
  }
  /** Gets the current subscription */
  OrgSubscriptionSystemController_getSubscription: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to retrieve subscription */
      500: {
        content: never
      }
    }
  }
  /** Updates subscription */
  OrgSubscriptionSystemController_updateSubscription: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSubscriptionV2AdminBody']
      }
    }
    responses: {
      /** @description Failed to update subscription */
      500: {
        content: never
      }
    }
  }
  /** Processes Vercel event */
  VercelWebhooksController_processEvent: {
    parameters: {
      header: {
        'x-vercel-signature': string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Buffer']
      }
    }
    responses: {
      /** @description Failed to process Vercel event */
      500: {
        content: never
      }
    }
  }
  /** Processes GitHub event */
  GitHubWebhooksController_processEvent: {
    parameters: {
      header: {
        'x-github-delivery': string
        'x-hub-signature-256': string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Buffer']
      }
    }
    responses: {
      /** @description Failed to process GitHub event */
      500: {
        content: never
      }
    }
  }
  /** Processes Stripe event */
  StripeWebhooksController_processEvent: {
    parameters: {
      header: {
        'stripe-signature': string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Buffer']
      }
    }
    responses: {
      /** @description Failed to process Stripe event */
      500: {
        content: never
      }
    }
  }
  /**
   * Get metrics
   * @description At most 50 projects can be queried at a time.
   * Currently supports '1d', '3d', and '7d' intervals.
   */
  V0ProjectsMetricsController_getProjectsMetrics: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetMetricsBody']
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /**
   * Get database branch config
   * @description Fetches configurations of the specified database branch
   */
  BranchController_getBranchDetails: {
    parameters: {
      path: {
        /** @description Branch ID */
        branch_id: string
      }
    }
    responses: {
      /** @description Failed to retrieve database branch */
      500: {
        content: never
      }
    }
  }
  /**
   * Delete a database branch
   * @description Deletes the specified database branch
   */
  BranchController_deleteBranch: {
    parameters: {
      path: {
        /** @description Branch ID */
        branch_id: string
      }
    }
    responses: {
      /** @description Failed to delete database branch */
      500: {
        content: never
      }
    }
  }
  /**
   * Update database branch config
   * @description Updates the configuration of the specified database branch
   */
  BranchController_updateBranch: {
    parameters: {
      path: {
        /** @description Branch ID */
        branch_id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateBranchBody']
      }
    }
    responses: {
      /** @description Failed to update database branch */
      500: {
        content: never
      }
    }
  }
  ApiKeysController_getProjectApiKeys: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
    }
  }
  /**
   * List all database branches
   * @description Returns all database branches of the specified project.
   */
  BranchesController_getBranches: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to retrieve database branches */
      500: {
        content: never
      }
    }
  }
  /**
   * Create a database branch
   * @description Creates a database branch from the specified project.
   */
  BranchesController_createBranch: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateBranchBody']
      }
    }
    responses: {
      /** @description Failed to create database branch */
      500: {
        content: never
      }
    }
  }
  /**
   * Disables preview branching
   * @description Disables preview branching for the specified project
   */
  BranchesController_disableBranch: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to disable preview branching */
      500: {
        content: never
      }
    }
  }
  /** Gets project's custom hostname config */
  CustomHostnamesController_getCustomHostnameConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project's custom hostname config */
      500: {
        content: never
      }
    }
  }
  /** Deletes a project's custom hostname configuration */
  CustomHostnamesController_removeCustomHostnameConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete project custom hostname configuration */
      500: {
        content: never
      }
    }
  }
  /** Updates project's custom hostname configuration */
  CustomHostnamesController_createCustomHostnameConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCustomHostnameBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project custom hostname configuration */
      500: {
        content: never
      }
    }
  }
  /** Attempts to verify the DNS configuration for project's custom hostname configuration */
  CustomHostnamesController_reverify: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to verify project custom hostname configuration */
      500: {
        content: never
      }
    }
  }
  /** Activates a custom hostname for a project. */
  CustomHostnamesController_activate: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to activate project custom hostname configuration */
      500: {
        content: never
      }
    }
  }
  /** Gets project's network bans */
  NetworkBansController_getNetworkBans: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project's network bans */
      500: {
        content: never
      }
    }
  }
  /** Remove network bans. */
  NetworkBansController_removeNetworkBan: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RemoveNetworkBanRequest']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to remove network bans. */
      500: {
        content: never
      }
    }
  }
  /** Gets project's network restrictions */
  NetworkRestrictionsController_getNetworkRestrictions: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project's network restrictions */
      500: {
        content: never
      }
    }
  }
  /** Updates project's network restrictions */
  NetworkRestrictionsController_applyNetworkRestrictions: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NetworkRestrictionsRequest']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project network restrictions */
      500: {
        content: never
      }
    }
  }
  /** Gets project's pgsodium config */
  PgsodiumConfigController_getPgsodiumConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project's pgsodium config */
      500: {
        content: never
      }
    }
  }
  /** Updates project's pgsodium config. Updating the root_key can cause all data encrypted with the older key to become inaccessible. */
  PgsodiumConfigController_updatePgsodiumConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePgsodiumConfigBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project's pgsodium config */
      500: {
        content: never
      }
    }
  }
  /**
   * List all secrets
   * @description Returns all secrets you've previously added to the specified project.
   */
  SecretsController_getSecrets: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project's secrets */
      500: {
        content: never
      }
    }
  }
  /**
   * Bulk create secrets
   * @description Creates multiple secrets and adds them to the specified project.
   */
  SecretsController_createSecrets: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSecretBody'][]
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create project's secrets */
      500: {
        content: never
      }
    }
  }
  /**
   * Bulk delete secrets
   * @description Deletes all secrets with the given names from the specified project
   */
  SecretsController_deleteSecrets: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete secrets with given names */
      500: {
        content: never
      }
    }
  }
  /** Get project's SSL enforcement configuration. */
  SslEnforcementController_getSslEnforcementConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project's SSL enforcement config */
      500: {
        content: never
      }
    }
  }
  /** Update project's SSL enforcement configuration. */
  SslEnforcementController_updateSslEnforcementConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SslEnforcementRequest']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project's SSL enforcement configuration. */
      500: {
        content: never
      }
    }
  }
  /**
   * Generate TypeScript types
   * @description Returns the TypeScript types of your schema for use with supabase-js.
   */
  TypesController_getTypescriptTypes: {
    parameters: {
      query?: {
        included_schemas?: string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to generate TypeScript types */
      500: {
        content: never
      }
    }
  }
  /** Gets current vanity subdomain config */
  VanitySubdomainsController_getVanitySubdomainConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get project vanity subdomain configuration */
      500: {
        content: never
      }
    }
  }
  /** Deletes a project's vanity subdomain configuration */
  VanitySubdomainsController_removeVanitySubdomainConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete project vanity subdomain configuration */
      500: {
        content: never
      }
    }
  }
  /** Checks vanity subdomain availability */
  VanitySubdomainsController_checkVanitySubdomainAvailability: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['VanitySubdomainBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to check project vanity subdomain configuration */
      500: {
        content: never
      }
    }
  }
  /** Activates a vanity subdomain for a project. */
  VanitySubdomainsController_activateVanitySubdomainPlease: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['VanitySubdomainBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to activate project vanity subdomain configuration */
      500: {
        content: never
      }
    }
  }
  /** Upgrades the project's Postgres version */
  UpgradeController_upgradeProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpgradeDatabaseBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to initiate project upgrade */
      500: {
        content: never
      }
    }
  }
  /** Returns the project's eligibility for upgrades */
  UpgradeController_upgradeEligibilityInformation: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to determine project upgrade eligibility */
      500: {
        content: never
      }
    }
  }
  /** Gets the latest status of the project's upgrade */
  UpgradeController_getUpgradeStatus: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project upgrade status */
      500: {
        content: never
      }
    }
  }
  /** Returns project's readonly mode status */
  ReadOnlyController_getReadOnlyModeStatus: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to get project readonly mode status */
      500: {
        content: never
      }
    }
  }
  /** Disables project's readonly mode for the next 15 minutes */
  ReadOnlyController_temporarilyDisableReadonlyMode: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to disable project's readonly mode */
      500: {
        content: never
      }
    }
  }
  /** Gets project's service health status */
  ServiceHealthController_checkServiceHealth: {
    parameters: {
      query: {
        timeout_ms: number
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ServiceHealthResponse'][]
        }
      }
      /** @description Failed to retrieve project's service health status */
      500: {
        content: never
      }
    }
  }
  /** Gets project's Postgres config */
  AuthPostgresConfigController_getConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to retrieve project's Postgres config */
      500: {
        content: never
      }
    }
  }
  /** Updates project's Postgres config */
  AuthPostgresConfigController_updateConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePostgresConfigBody']
      }
    }
    responses: {
      /** @description Failed to update project's Postgres config */
      500: {
        content: never
      }
    }
  }
  /** Get project's pgbouncer config */
  V1PgbouncerConfigController_v1GetPgbouncerConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to retrieve project's pgbouncer config */
      500: {
        content: never
      }
    }
  }
  /** Gets project's auth config */
  V1AuthConfigController_getV1AuthConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project's auth config */
      500: {
        content: never
      }
    }
  }
  /** Updates a project's auth config */
  V1AuthConfigController_updateV1AuthConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAuthConfigBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project's auth config */
      500: {
        content: never
      }
    }
  }
  /** Lists all SSO providers */
  ProvidersController_listAllProviders: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description SAML 2.0 support is not enabled for this project */
      404: {
        content: never
      }
    }
  }
  /** Creates a new SSO provider */
  ProvidersController_createProviderForProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateProviderBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description SAML 2.0 support is not enabled for this project */
      404: {
        content: never
      }
    }
  }
  /** Gets a SSO provider by its UUID */
  ProvidersController_getProviderById: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Either SAML 2.0 was not enabled for this project, or the provider does not exist */
      404: {
        content: never
      }
    }
  }
  /** Updates a SSO provider by its UUID */
  ProvidersController_updateProviderById: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateProviderBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Either SAML 2.0 was not enabled for this project, or the provider does not exist */
      404: {
        content: never
      }
    }
  }
  /** Removes a SSO provider by its UUID */
  ProvidersController_removeProviderById: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Either SAML 2.0 was not enabled for this project, or the provider does not exist */
      404: {
        content: never
      }
    }
  }
  /** Run sql query */
  V1QueryController_v1RunQuery: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RunQueryBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to run sql query */
      500: {
        content: never
      }
    }
  }
  /** Enables Database Webhooks on the project */
  V1DatabaseWebhooksController_v1EnableDatabaseWebhooks: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to enable Database Webhooks on the project */
      500: {
        content: never
      }
    }
  }
  /** Restores a PITR backup for a database */
  V1RestorePitrController_v1RestorePitr: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['V1RestorePitrBody']
      }
    }
    responses: {
      201: {
        content: never
      }
    }
  }
  /**
   * Retrieve a function
   * @description Retrieves a function with the specified slug and project.
   */
  FunctionSlugController_getFunction: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Function slug */
        function_slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve function with given slug */
      500: {
        content: never
      }
    }
  }
  /**
   * Delete a function
   * @description Deletes a function with the specified slug from the specified project.
   */
  FunctionSlugController_deleteFunction: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Function slug */
        function_slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete function with given slug */
      500: {
        content: never
      }
    }
  }
  /**
   * Update a function
   * @description Updates a function with the specified slug and project.
   */
  FunctionSlugController_updateFunction: {
    parameters: {
      query?: {
        import_map_path?: string
        entrypoint_path?: string
        import_map?: boolean
        verify_jwt?: boolean
        name?: string
      }
      path: {
        /** @description Project ref */
        ref: string
        /** @description Function slug */
        function_slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateFunctionBody']
        'application/vnd.denoland.eszip': components['schemas']['UpdateFunctionBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update function with given slug */
      500: {
        content: never
      }
    }
  }
  /**
   * Retrieve a function body
   * @description Retrieves a function body for the specified slug and project.
   */
  FunctionSlugController_getFunctionBody: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Function slug */
        function_slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve function body with given slug */
      500: {
        content: never
      }
    }
  }
  /** Create an organization */
  OrganizationsController_createOrganization: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateOrganizationBody']
      }
    }
    responses: {
      /** @description Unexpected error creating an organization */
      500: {
        content: never
      }
    }
  }
  /** List members of an organization */
  V1OrganizationMembersController_v1ListOrganizationMembers: {
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Authorize user through oauth */
  OAuthController_authorize: {
    responses: {
      303: {
        content: never
      }
    }
  }
  /** Exchange auth code for user's access and refresh token */
  OAuthController_token: {
    requestBody: {
      content: {
        'application/x-www-form-urlencoded': components['schemas']['OAuthTokenBody']
      }
    }
    responses: {
      201: {
        content: never
      }
    }
  }
  /** Lists SQL snippets for the logged in user */
  SnippetsController_listSnippets: {
    responses: {
      /** @description Failed to list user's SQL snippets */
      500: {
        content: never
      }
    }
  }
  /** Gets a specific SQL snippet */
  SnippetsController_getSnippet: {
    parameters: {
      path: {
        id: string
      }
    }
    responses: {
      /** @description Failed to retrieve SQL snippet */
      500: {
        content: never
      }
    }
  }
  /** Redirects to Supabase dashboard after completing Fly sso */
  CallbackController_redirectToDashboardFlyioExtensionScreen: {
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Gets database status */
  ExtensionController_getResourceStatus: {
    parameters: {
      path: {
        extension_id: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Deletes a database */
  ExtensionController_deleteResource: {
    parameters: {
      path: {
        extension_id: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Starts Fly single sign on */
  ExtensionController_startFlyioSSO: {
    parameters: {
      path: {
        extension_id: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Gets resource billing */
  ExtensionController_getResourceBilling: {
    parameters: {
      path: {
        extension_id: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Creates a database */
  ExtensionsController_provisionResource: {
    responses: {
      201: {
        content: never
      }
    }
  }
  /** Gets all databases that belong to the Fly organization */
  OrganizationsController_getOrgExtensions: {
    parameters: {
      path: {
        organization_id: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Starts Fly single sign on */
  OrganizationsController_startFlyioSSO: {
    parameters: {
      path: {
        organization_id: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
}
